{"version":3,"file":"js/360.21cda826.js","mappings":"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","sources":["webpack://vue-project/../../../../src/scene/graphics/gl/GlGraphicsAdaptor.ts","webpack://vue-project/../../../../src/scene/mesh/gl/GlMeshAdaptor.ts","webpack://vue-project/../../../../src/rendering/batcher/gl/GlBatchAdaptor.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/buffer/const.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/buffer/GlBuffer.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/buffer/GlBufferSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/context/GlContextSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/const.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/geometry/utils/getGlTypeFromFormat.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/geometry/GlGeometrySystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/GlBackBufferSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/GlColorMaskSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/GlEncoderSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/GlStencilSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/utils/createUboElementsSTD40.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/utils/createUboSyncSTD40.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/GlUboSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/GlRenderTarget.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/renderTarget/GlRenderTargetSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/GenerateShaderSyncCode.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/GlProgramData.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/compileShader.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/defaultValue.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/mapType.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/extractAttributesFromGlProgram.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/getUboData.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/getUniformData.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/logProgramError.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/generateProgram.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/GlShaderSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/utils/generateUniformsSyncTypes.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/utils/generateUniformsSync.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/GlUniformGroupSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/state/GlStateSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/GlTexture.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/uploaders/glUploadImageResource.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/uploaders/glUploadVideoResource.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/utils/pixiToGlMaps.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/utils/applyStyleParams.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/utils/mapFormatToGlType.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/texture/GlTextureSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/WebGLRenderer.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses WebGL to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GlGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'graphics',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this.shader = new Shader({\n            glProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGLRenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            batcher, instructions,\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGL specific..\n        shader.groups[0] = renderer.globalUniforms.bindGroup;\n\n        renderer.state.set(graphicsPipe.state);\n\n        renderer.shader.bind(shader);\n\n        renderer.geometry.bind(batcher.geometry, shader.glProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.size)\n            {\n                for (let j = 0; j < batch.textures.count; j++)\n                {\n                    renderer.texture.bind(batch.textures.textures[j], j);\n                }\n\n                renderer.geometry.draw('triangle-list', batch.size, batch.start);\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBitGl } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * A MeshAdaptor that uses the WebGL to render meshes.\n * @memberof rendering\n * @ignore\n */\nexport class GlMeshAdaptor implements MeshAdaptor\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBitGl,\n                textureBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                uTexture: Texture.EMPTY.source,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh): void\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            const texture = mesh.texture;\n            const source = texture.source;\n\n            shader.resources.uTexture = source;\n            shader.resources.uSampler = source.style;\n            shader.resources.textureUniforms.uniforms.uTextureMatrix = texture.textureMatrix.mapCoord;\n        }\n        else if (!shader.glProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no glProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        // setting the groups to be high to be compatible and not\n        // overlap any other groups\n        shader.groups[100] = renderer.globalUniforms.bindGroup;\n        shader.groups[101] = meshPipe.localUniformsBindGroup;\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state,\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\n/**\n * A BatcherAdaptor that uses WebGL to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _didUpload = false;\n    private readonly _tempState = State.for2d();\n\n    public init(batcherPipe: BatcherPipe): void\n    {\n        batcherPipe.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._didUpload = false;\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        // only want to sync the shade ron its first bind!\n        renderer.shader.bind(shader, this._didUpload);\n\n        renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n\n        renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        this._didUpload = true;\n\n        this._tempState.blendMode = batch.blendMode;\n\n        renderer.state.set(this._tempState);\n\n        const textures = batch.textures.textures;\n\n        for (let i = 0; i < batch.textures.count; i++)\n        {\n            renderer.texture.bind(textures[i], i);\n        }\n\n        renderer.geometry.draw('triangle-list', batch.size, batch.start);\n    }\n}\n","/**\n * Constants for various buffer types in Pixi\n * @see BUFFER_TYPE\n * @name BUFFER_TYPE\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */\nexport enum BUFFER_TYPE\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    ELEMENT_ARRAY_BUFFER = 34963,\n    ARRAY_BUFFER = 34962,\n    UNIFORM_BUFFER = 35345,\n}\n\n","import type { BUFFER_TYPE } from './const';\n\nexport class GlBuffer\n{\n    public buffer: WebGLBuffer;\n    public updateID: number;\n    public byteLength: number;\n    public type: number;\n\n    constructor(buffer: WebGLBuffer, type: BUFFER_TYPE)\n    {\n        this.buffer = buffer || null;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.type = type;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BufferUsage } from '../../shared/buffer/const';\nimport { BUFFER_TYPE } from './const';\nimport { GlBuffer } from './GlBuffer';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the Buffer class.\n * @class\n * @memberof rendering\n */\nexport class GlBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    private _gl: GlRenderingContext;\n    private _gpuBuffers: {[key: number]: GlBuffer} = Object.create(null);\n\n    /** Cache keeping track of the base bound buffer bases */\n    private readonly _boundBufferBases: {[key: number]: Buffer} = Object.create(null);\n\n    private _renderer: WebGLRenderer;\n\n    /**\n     * @param {Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBuffers');\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._gl = null;\n        this._gpuBuffers = null;\n        (this._boundBufferBases as null) = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this._gpuBuffers = Object.create(null);\n        this._gl = this._renderer.gl;\n    }\n\n    public getGlBuffer(buffer: Buffer): GlBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    public bind(buffer: Buffer): void\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    public bindBufferBase(buffer: Buffer, index: number): void\n    {\n        const { _gl: gl } = this;\n\n        if (this._boundBufferBases[index] !== buffer)\n        {\n            const glBuffer = this.getGlBuffer(buffer);\n\n            this._boundBufferBases[index] = buffer;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */\n    public bindBufferRange(buffer: Buffer, index?: number, offset?: number): void\n    {\n        const { _gl: gl } = this;\n\n        offset = offset || 0;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {Buffer} buffer - the buffer to update\n     */\n    public updateBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return glBuffer;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n\n        const data = buffer.data;\n\n        if (glBuffer.byteLength >= buffer.data.byteLength)\n        {\n            // assuming our buffers are aligned to 4 bits...\n            // offset is always zero for now!\n            gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n        }\n        else\n        {\n            const drawType = (buffer.descriptor.usage & BufferUsage.STATIC) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n            glBuffer.byteLength = data.byteLength;\n\n            // assuming our buffers are aligned to 4 bits...\n            gl.bufferData(glBuffer.type, data, drawType);\n        }\n\n        return glBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        const gl = this._gl;\n\n        for (const id in this._gpuBuffers)\n        {\n            gl.deleteBuffer(this._gpuBuffers[id].buffer);\n        }\n\n        this._gpuBuffers = Object.create(null);\n    }\n\n    /**\n     * Disposes buffer\n     * @param {Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onBufferDestroy(buffer: Buffer, contextLost?: boolean): void\n    {\n        const glBuffer = this._gpuBuffers[buffer.uid];\n\n        const gl = this._gl;\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        let type = BUFFER_TYPE.ARRAY_BUFFER;\n\n        if ((buffer.descriptor.usage & BufferUsage.INDEX))\n        {\n            type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n        else if ((buffer.descriptor.usage & BufferUsage.UNIFORM))\n        {\n            type = BUFFER_TYPE.UNIFORM_BUFFER;\n        }\n\n        const glBuffer = new GlBuffer(gl.createBuffer(), type);\n\n        this._gpuBuffers[buffer.uid] = glBuffer;\n\n        buffer.on('destroy', this.onBufferDestroy, this);\n\n        return glBuffer;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { warn } from '../../../../utils/logging/warn';\nimport { type GpuPowerPreference } from '../../types';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\n/**\n * Options for the context system.\n * @memberof rendering\n * @property {WebGL2RenderingContext | null} [context=null] - User-provided WebGL rendering context object.\n * @property {GpuPowerPreference} [powerPreference='default'] - An optional hint indicating what configuration\n * of GPU is suitable for the WebGL context, can be `'high-performance'` or `'low-power'`. Setting to `'high-performance'`\n * will prioritize rendering performance over power consumption, while setting to `'low-power'` will prioritize power saving\n * over rendering performance.\n * @property {boolean} [premultipliedAlpha=true] - Whether the compositor will assume the drawing buffer contains\n * colors with premultiplied alpha.\n * @property {boolean} [preserveDrawingBuffer=false] - Whether to enable drawing buffer preservation.\n * If enabled, the drawing buffer will preserve\n * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n * @property {boolean} [antialias] - Whether to enable antialiasing.\n * @property {1 | 2} [preferWebGLVersion=2] - The preferred WebGL version to use.\n */\nexport interface ContextSystemOptions\n{\n    /**\n     * User-provided WebGL rendering context object.\n     * @default null\n     * @memberof rendering.SharedRendererOptions\n     */\n    context: WebGL2RenderingContext | null;\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @memberof rendering.SharedRendererOptions\n     * @default undefined\n     */\n    powerPreference?: GpuPowerPreference;\n\n    /**\n     * Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    premultipliedAlpha: boolean;\n    /**\n     * Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @default false\n     * @memberof rendering.SharedRendererOptions\n     */\n    preserveDrawingBuffer: boolean;\n\n    antialias?: boolean;\n\n    /**\n     * The preferred WebGL version to use.\n     * @default 2\n     * @memberof rendering.SharedRendererOptions\n     */\n    preferWebGLVersion?: 1 | 2;\n\n    /**\n     * Whether to enable multi-view rendering. Set to true when rendering to multiple\n     * canvases on the dom.\n     * @default false\n     * @memberof rendering.SharedRendererOptions\n     */\n    multiView: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context\n * @memberof rendering\n */\nexport class GlContextSystem implements System<ContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'context',\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: ContextSystemOptions = {\n        /**\n         * {@link WebGLOptions.context}\n         * @default null\n         */\n        context: null,\n        /**\n         * {@link WebGLOptions.premultipliedAlpha}\n         * @default true\n         */\n        premultipliedAlpha: true,\n        /**\n         * {@link WebGLOptions.preserveDrawingBuffer}\n         * @default false\n         */\n        preserveDrawingBuffer: false,\n        /**\n         * {@link WebGLOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * {@link WebGLOptions.webGLVersion}\n         * @default 2\n         */\n        preferWebGLVersion: 2,\n        /**\n         * {@link WebGLOptions.multiView}\n         * @default false\n         */\n        multiView: false\n    };\n\n    protected CONTEXT_UID: number;\n    protected gl: WebGL2RenderingContext;\n\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    public supports = {\n        /** Support for 32-bit indices buffer. */\n        uint32Indices: true,\n        /** Support for UniformBufferObjects */\n        uniformBufferObject: true,\n        /** Support for VertexArrayObjects */\n        vertexArrayObject: true,\n        /** Support for SRGB texture format */\n        srgbTextures: true,\n        /** Support for wrapping modes if a texture is non-power of two */\n        nonPowOf2wrapping: true,\n        /** Support for MSAA (antialiasing of dynamic textures) */\n        msaa: true,\n        /** Support for mipmaps if a texture is non-power of two */\n        nonPowOf2mipmaps: true,\n    };\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    public webGLVersion: 1 | 2;\n\n    /**\n     * Whether to enable multi-view rendering. Set to true when rendering to multiple\n     * canvases on the dom.\n     * @default false\n     */\n    public multiView: boolean;\n\n    /**\n     * The canvas that the WebGL Context is rendering to.\n     * This will be the view canvas. But if multiView is enabled, this canvas will not be attached to the DOM.\n     * It will be rendered to and then copied to the target canvas.\n     * @readonly\n     */\n    public canvas: ICanvas;\n\n    private _renderer: WebGLRenderer;\n    private _contextLossForced: boolean;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.extensions = Object.create(null);\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n        this._renderer.gl = gl;\n    }\n\n    public init(options: ContextSystemOptions): void\n    {\n        options = { ...GlContextSystem.defaultOptions, ...options };\n\n        // TODO add to options\n        let multiView = this.multiView = options.multiView;\n\n        if (options.context && multiView)\n        {\n            // eslint-disable-next-line max-len\n            warn('Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together.');\n\n            multiView = false;\n        }\n\n        if (multiView)\n        {\n            this.canvas = DOMAdapter.get()\n                .createCanvas(this._renderer.canvas.width, this._renderer.canvas.height);\n        }\n        else\n        {\n            this.canvas = this._renderer.view.canvas;\n        }\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this._renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha ?? true;\n            const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n\n            this.createContext(options.preferWebGLVersion, {\n                alpha,\n                premultipliedAlpha,\n                antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference ?? 'default',\n            });\n        }\n    }\n\n    public ensureCanvasSize(targetCanvas: ICanvas): void\n    {\n        if (!this.multiView)\n        {\n            if (targetCanvas !== this.canvas)\n            {\n                warn('multiView is disabled, but targetCanvas is not the main canvas');\n            }\n\n            return;\n        }\n\n        const { canvas } = this;\n\n        if (canvas.width < targetCanvas.width || canvas.height < targetCanvas.height)\n        {\n            canvas.width = Math.max(targetCanvas.width, targetCanvas.width);\n            canvas.height = Math.max(targetCanvas.height, targetCanvas.height);\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    protected initFromContext(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n\n        this.webGLVersion = gl instanceof DOMAdapter.get().getWebGLRenderingContext() ? 1 : 2;\n\n        this.getExtensions();\n\n        this.validateContext(gl);\n\n        this._renderer.runners.contextChange.emit(gl);\n\n        const element = this._renderer.view.canvas;\n\n        (element as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        element.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param preferWebGLVersion\n     * @param {object} options - context attributes\n     */\n    protected createContext(preferWebGLVersion: 1 | 2, options: WebGLContextAttributes): void\n    {\n        let gl: WebGL2RenderingContext | WebGLRenderingContext;\n\n        const canvas = this.canvas;\n\n        if (preferWebGLVersion === 2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (!gl)\n        {\n            gl = canvas.getContext('webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as WebGL2RenderingContext;\n\n        this.initFromContext(this.gl);\n    }\n\n    /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc'),\n            bptc: gl.getExtension('EXT_texture_compression_bptc'),\n            rgtc: gl.getExtension('EXT_texture_compression_rgtc'),\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            this.extensions = {\n                ...common,\n\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n                vertexAttribDivisorANGLE: gl.getExtension('ANGLE_instanced_arrays'),\n                srgb: gl.getExtension('EXT_sRGB'),\n            };\n        }\n        else\n        {\n            this.extensions = {\n                ...common,\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),\n            };\n\n            const provokeExt = gl.getExtension('WEBGL_provoking_vertex');\n\n            if (provokeExt)\n            {\n                provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL);\n            }\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        event.preventDefault();\n\n        // only restore if we purposefully nuked it\n        if (this._contextLossForced)\n        {\n            this._contextLossForced = false;\n            // Restore the context after this event has exited\n            setTimeout(() =>\n            {\n                if (this.gl.isContextLost())\n                {\n                    this.extensions.loseContext?.restoreContext();\n                }\n            }, 0);\n        }\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this._renderer.runners.contextChange.emit(this.gl);\n    }\n\n    public destroy(): void\n    {\n        const element = this._renderer.view.canvas;\n\n        this._renderer = null;\n\n        // remove listeners\n        (element as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        element.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        this.extensions.loseContext?.loseContext();\n    }\n\n    /**\n     * this function can be called to force a webGL context loss\n     * this will release all resources on the GPU.\n     * Useful if you need to put Pixi to sleep, and save some GPU memory\n     *\n     * As soon as render is called - all resources will be created again.\n     */\n    public forceContextLoss(): void\n    {\n        this.extensions.loseContext?.loseContext();\n        this._contextLossForced = true;\n    }\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: WebGL2RenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n\n        // support\n        const supports = this.supports;\n\n        const isWebGl2 = this.webGLVersion === 2;\n        const extensions = this.extensions;\n\n        supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n        supports.uniformBufferObject = isWebGl2;\n        supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n        supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n        supports.nonPowOf2wrapping = isWebGl2;\n        supports.nonPowOf2mipmaps = isWebGl2;\n        supports.msaa = isWebGl2;\n\n        if (!supports.uint32Indices)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not support 32 index buffer, large scenes may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n    }\n}\n","/**\n * Various GL texture/resources formats.\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} [RGBA=6408] -\n * @property {number} [RGB=6407] -\n * @property {number} [RG=33319] -\n * @property {number} [RED=6403] -\n * @property {number} [RGBA_INTEGER=36249] -\n * @property {number} [RGB_INTEGER=36248] -\n * @property {number} [RG_INTEGER=33320] -\n * @property {number} [RED_INTEGER=36244] -\n * @property {number} [ALPHA=6406] -\n * @property {number} [LUMINANCE=6409] -\n * @property {number} [LUMINANCE_ALPHA=6410] -\n * @property {number} [DEPTH_COMPONENT=6402] -\n * @property {number} [DEPTH_STENCIL=34041] -\n */\nexport enum GL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    RGBA = 6408,\n    RGB = 6407,\n    RG = 33319,\n    RED = 6403,\n    RGBA_INTEGER = 36249,\n    RGB_INTEGER = 36248,\n    RG_INTEGER = 33320,\n    RED_INTEGER = 36244,\n    ALPHA = 6406,\n    LUMINANCE = 6409,\n    LUMINANCE_ALPHA = 6410,\n    DEPTH_COMPONENT = 6402,\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} [TEXTURE_2D=3553] -\n * @property {number} [TEXTURE_CUBE_MAP=34067] -\n * @property {number} [TEXTURE_2D_ARRAY=35866] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_X=34069] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_X=34070] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Y=34071] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Y=34072] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Z=34073] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Z=34074] -\n */\nexport enum GL_TARGETS\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    TEXTURE_2D = 3553,\n    TEXTURE_CUBE_MAP = 34067,\n    TEXTURE_2D_ARRAY = 35866,\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n * @name WRAP_MODES\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nexport enum GL_WRAP_MODES\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    CLAMP = 33071,\n    REPEAT = 10497,\n    MIRRORED_REPEAT = 33648,\n}\n\nexport enum GL_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 8 bits per channel for gl.RGBA\n     * @default 5121\n     */\n    UNSIGNED_BYTE = 5121,\n    /**\n     * @default 5123\n     */\n    UNSIGNED_SHORT = 5123,\n    /**\n     * 5 red bits, 6 green bits, 5 blue bits.\n     * @default 33635\n     */\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    /**\n     * 4 red bits, 4 green bits, 4 blue bits, 4 alpha bits.\n     * @default 32819\n     */\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    /**\n     * 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.\n     * @default 32820\n     */\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    /**\n     * @default 5125\n     */\n    UNSIGNED_INT = 5125,\n    /**\n     * @default 35899\n     */\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\n    /**\n     * @default 33640\n     */\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\n    /**\n     * @default 34042\n     */\n    UNSIGNED_INT_24_8 = 34042,\n    /**\n     * @default 35902\n     */\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\n    /**\n     * @default 5120\n     */\n    BYTE = 5120,\n    /**\n     * @default 5122\n     */\n    SHORT = 5122,\n    /**\n     * @default 5124\n     */\n    INT = 5124,\n    /**\n     * @default 5126\n     */\n    FLOAT = 5126,\n    /**\n     * @default 36269\n     */\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\n    /**\n     * @default 36193\n     */\n    HALF_FLOAT = 36193,\n}\n\n","import { GL_TYPES } from '../../texture/const';\n\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nconst infoMap = {\n    uint8x2: GL_TYPES.UNSIGNED_BYTE,\n    uint8x4: GL_TYPES.UNSIGNED_BYTE,\n    sint8x2: GL_TYPES.BYTE,\n    sint8x4: GL_TYPES.BYTE,\n    unorm8x2: GL_TYPES.UNSIGNED_BYTE,\n    unorm8x4: GL_TYPES.UNSIGNED_BYTE,\n    snorm8x2: GL_TYPES.BYTE,\n    snorm8x4: GL_TYPES.BYTE,\n    uint16x2: GL_TYPES.UNSIGNED_SHORT,\n    uint16x4: GL_TYPES.UNSIGNED_SHORT,\n    sint16x2: GL_TYPES.SHORT,\n    sint16x4: GL_TYPES.SHORT,\n    unorm16x2: GL_TYPES.UNSIGNED_SHORT,\n    unorm16x4: GL_TYPES.UNSIGNED_SHORT,\n    snorm16x2: GL_TYPES.SHORT,\n    snorm16x4: GL_TYPES.SHORT,\n    float16x2: GL_TYPES.HALF_FLOAT,\n    float16x4: GL_TYPES.HALF_FLOAT,\n    float32: GL_TYPES.FLOAT,\n    float32x2: GL_TYPES.FLOAT,\n    float32x3: GL_TYPES.FLOAT,\n    float32x4: GL_TYPES.FLOAT,\n    uint32: GL_TYPES.UNSIGNED_INT,\n    uint32x2: GL_TYPES.UNSIGNED_INT,\n    uint32x3: GL_TYPES.UNSIGNED_INT,\n    uint32x4: GL_TYPES.UNSIGNED_INT,\n    sint32: GL_TYPES.INT,\n    sint32x2: GL_TYPES.INT,\n    sint32x3: GL_TYPES.INT,\n    sint32x4: GL_TYPES.INT\n};\n\nexport function getGlTypeFromFormat(format: VertexFormat): number\n{\n    return infoMap[format] ?? infoMap.float32;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { getAttributeInfoFromFormat } from '../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ensureAttributes } from '../shader/program/ensureAttributes';\nimport { getGlTypeFromFormat } from './utils/getGlTypeFromFormat';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { GlProgram } from '../shader/GlProgram';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\nconst topologyToGlMap = {\n    'point-list': 0x0000,\n    'line-list': 0x0001,\n    'line-strip': 0x0003,\n    'triangle-list': 0x0004,\n    'triangle-strip': 0x0005\n};\n\n/**\n * System plugin to the renderer to manage geometry.\n * @memberof rendering\n */\nexport class GlGeometrySystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'geometry',\n    } as const;\n\n    /**\n     * `true` if we has `*_vertex_array_object` extension.\n     * @readonly\n     */\n    public hasVao: boolean;\n\n    /**\n     * `true` if has `ANGLE_instanced_arrays` extension.\n     * @readonly\n     */\n    public hasInstance: boolean;\n\n    protected gl: GlRenderingContext;\n    protected _activeGeometry: Geometry;\n    protected _activeVao: WebGLVertexArrayObject;\n\n    protected _geometryVaoHash: Record<number, Record<string, WebGLVertexArrayObject>> = Object.create(null);\n\n    /** Renderer that owns this {@link GeometrySystem}. */\n    private _renderer: WebGLRenderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        this.hasVao = true;\n        this.hasInstance = true;\n\n        this._renderer.renderableGC.addManagedHash(this, '_geometryVaoHash');\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        const gl = this.gl = this._renderer.gl;\n\n        if (!this._renderer.context.supports.vertexArrayObject)\n        {\n            throw new Error('[PixiJS] Vertex Array Objects are not supported on this device');\n        }\n\n        const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n\n        if (nativeVaoExtension)\n        {\n            gl.createVertexArray = (): WebGLVertexArrayObject =>\n                nativeVaoExtension.createVertexArrayOES();\n\n            gl.bindVertexArray = (vao): void =>\n                nativeVaoExtension.bindVertexArrayOES(vao);\n\n            gl.deleteVertexArray = (vao): void =>\n                nativeVaoExtension.deleteVertexArrayOES(vao);\n        }\n\n        const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n\n        if (nativeInstancedExtension)\n        {\n            gl.drawArraysInstanced = (a, b, c, d): void =>\n            {\n                nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n            };\n\n            gl.drawElementsInstanced = (a, b, c, d, e): void =>\n            {\n                nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n            };\n\n            gl.vertexAttribDivisor = (a, b): void =>\n                nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n        }\n\n        this._activeGeometry = null;\n        this._activeVao = null;\n        this._geometryVaoHash = Object.create(null);\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     * @param geometry - Instance of geometry to bind.\n     * @param program - Instance of program to use vao for.\n     */\n    public bind(geometry?: Geometry, program?: GlProgram): void\n    {\n        // shader = shader || this.renderer.shader.shader;\n\n        const gl = this.gl;\n\n        this._activeGeometry = geometry;\n\n        const vao = this.getVao(geometry, program);\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            gl.bindVertexArray(vao);\n        }\n\n        this.updateBuffers();\n    }\n\n    /** Reset and unbind any active VAO and geometry. */\n    public reset(): void\n    {\n        this.unbind();\n    }\n\n    /** Update buffers of the currently bound geometry. */\n    public updateBuffers(): void\n    {\n        const geometry = this._activeGeometry;\n\n        const bufferSystem = this._renderer.buffer;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            bufferSystem.updateBuffer(buffer);\n        }\n    }\n\n    /**\n     * Check compatibility between a geometry and a program\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */\n    protected checkCompatibility(geometry: Geometry, program: GlProgram): void\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @returns - Unique signature of the geometry and program\n     */\n    protected getSignature(geometry: Geometry, program: GlProgram): string\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        const strings = ['g', geometry.uid];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i, shaderAttributes[i].location);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    protected getVao(geometry: Geometry, program: GlProgram): WebGLVertexArrayObject\n    {\n        return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param program\n     * @param _incRefCount - Increment refCount of all geometry buffers.\n     */\n    protected initGeometryVao(geometry: Geometry, program: GlProgram, _incRefCount = true): WebGLVertexArrayObject\n    {\n        const gl = this._renderer.gl;\n        // const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this._renderer.buffer;\n\n        this._renderer.shader._getProgramData(program);\n\n        this.checkCompatibility(geometry, program);\n\n        const signature = this.getSignature(geometry, program);\n\n        if (!this._geometryVaoHash[geometry.uid])\n        {\n            this._geometryVaoHash[geometry.uid] = Object.create(null);\n\n            geometry.on('destroy', this.onGeometryDestroy, this);\n        }\n\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program._key] = vao;\n\n            return vao;\n        }\n\n        ensureAttributes(geometry, program._attributeData);\n\n        const buffers = geometry.buffers;\n\n        // @TODO: We don't know if VAO is supported.\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            bufferSystem.bind(buffer);\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        // add it to the cache!\n        vaoObjectHash[program._key] = vao;\n        vaoObjectHash[signature] = vao;\n\n        gl.bindVertexArray(null);\n\n        return vao;\n    }\n\n    /**\n     * Disposes geometry.\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onGeometryDestroy(geometry: Geometry, contextLost?: boolean): void\n    {\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        const gl = this.gl;\n\n        if (vaoObjectHash)\n        {\n            if (contextLost)\n            {\n                for (const i in vaoObjectHash)\n                {\n                    if (this._activeVao !== vaoObjectHash[i])\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[i]);\n                }\n            }\n\n            this._geometryVaoHash[geometry.uid] = null;\n        }\n    }\n\n    /**\n     * Dispose all WebGL resources of all managed geometries.\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    public destroyAll(contextLost = false): void\n    {\n        const gl = this.gl;\n\n        for (const i in this._geometryVaoHash)\n        {\n            if (contextLost)\n            {\n                for (const j in this._geometryVaoHash[i])\n                {\n                    const vaoObjectHash = this._geometryVaoHash[i];\n\n                    if (this._activeVao !== vaoObjectHash)\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[j]);\n                }\n            }\n\n            this._geometryVaoHash[i] = null;\n        }\n    }\n\n    /**\n     * Activate vertex array object.\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */\n    protected activateVao(geometry: Geometry, program: GlProgram): void\n    {\n        const gl = this._renderer.gl;\n\n        const bufferSystem = this._renderer.buffer;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            bufferSystem.bind(geometry.indexBuffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = attribute.buffer;\n            const glBuffer = bufferSystem.getGlBuffer(buffer);\n            const programAttrib = program._attributeData[j];\n\n            if (programAttrib)\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    bufferSystem.bind(buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = programAttrib.location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                const attributeInfo = getAttributeInfoFromFormat(attribute.format);\n\n                const type = getGlTypeFromFormat(attribute.format);\n\n                if (programAttrib.format?.substring(1, 4) === 'int')\n                {\n                    gl.vertexAttribIPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attribute.stride,\n                        attribute.offset);\n                }\n                else\n                {\n                    gl.vertexAttribPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attributeInfo.normalised,\n                        attribute.stride,\n                        attribute.offset);\n                }\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        // Can't use truthiness check to determine if divisor is set,\n                        // since 0 is a valid value for divisor\n                        const divisor = attribute.divisor ?? 1;\n\n                        gl.vertexAttribDivisor(location, divisor);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the currently bound geometry.\n     * @param topology - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */\n    public draw(topology?: Topology, size?: number, start?: number, instanceCount?: number): this\n    {\n        const { gl } = this._renderer;\n        const geometry = this._activeGeometry;\n\n        const glTopology = topologyToGlMap[geometry.topology || topology];\n\n        instanceCount ||= geometry.instanceCount;\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (instanceCount > 1)\n            {\n                /* eslint-disable max-len */\n                gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n                /* eslint-enable max-len */\n            }\n            else\n            {\n                /* eslint-disable max-len */\n                gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n                /* eslint-enable max-len */\n            }\n        }\n        else if (instanceCount > 1)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n        }\n        else\n        {\n            gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /** Unbind/reset everything. */\n    protected unbind(): void\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this.gl = null;\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { warn } from '../../../utils/logging/warn';\nimport { Geometry } from '../shared/geometry/Geometry';\nimport { Shader } from '../shared/shader/Shader';\nimport { State } from '../shared/state/State';\nimport { TextureSource } from '../shared/texture/sources/TextureSource';\nimport { Texture } from '../shared/texture/Texture';\nimport { GlProgram } from './shader/GlProgram';\n\nimport type { RenderOptions } from '../shared/system/AbstractRenderer';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nconst bigTriangleGeometry = new Geometry({\n    attributes: {\n        aPosition: [\n            -1.0, -1.0, // Bottom left corner\n            3.0, -1.0, // Bottom right corner, extending beyond right edge\n            -1.0, 3.0 // Top left corner, extending beyond top edge\n        ],\n    },\n});\n\n/**\n * The options for the back buffer system.\n * @memberof rendering\n * @property {boolean} [useBackBuffer=false] - if true will use the back buffer where required\n * @property {boolean} [antialias=false] - if true will ensure the texture is antialiased\n */\nexport interface GlBackBufferOptions\n{\n    /**\n     * if true will use the back buffer where required\n     * @default false\n     * @memberof rendering.WebGLOptions\n     */\n    useBackBuffer?: boolean;\n    /** if true will ensure the texture is antialiased */\n    antialias?: boolean;\n}\n\n/**\n * For blend modes you need to know what pixels you are actually drawing to. For this to be possible in WebGL\n * we need to render to a texture and then present that texture to the screen. This system manages that process.\n *\n * As the main scene is rendered to a texture, it means we can sample it and copy its pixels,\n * something not possible on the main canvas.\n *\n * If antialiasing is set to to true and useBackBuffer is set to true, then the back buffer will be antialiased.\n * and the main gl context will not.\n *\n * You only need to activate this back buffer if you are using a blend mode that requires it.\n *\n * to activate is simple, you pass `useBackBuffer:true` to your render options\n * @memberof rendering\n */\nexport class GlBackBufferSystem implements System<GlBackBufferOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'backBuffer',\n        priority: 1\n    } as const;\n\n    /** default options for the back buffer system */\n    public static defaultOptions: GlBackBufferOptions = {\n        /** if true will use the back buffer where required */\n        useBackBuffer: false,\n    };\n\n    /** if true, the back buffer is used */\n    public useBackBuffer = false;\n\n    private _backBufferTexture: Texture;\n    private readonly _renderer: WebGLRenderer;\n    private _targetTexture: TextureSource;\n    private _useBackBufferThisRender = false;\n    private _antialias: boolean;\n    private _state: State;\n    private _bigTriangleShader: Shader;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: GlBackBufferOptions = {})\n    {\n        const { useBackBuffer, antialias } = { ...GlBackBufferSystem.defaultOptions, ...options };\n\n        this.useBackBuffer = useBackBuffer;\n\n        this._antialias = antialias;\n\n        if (!this._renderer.context.supports.msaa)\n        {\n            warn('antialiasing, is not supported on when using the back buffer');\n\n            this._antialias = false;\n        }\n\n        this._state = State.for2d();\n\n        const bigTriangleProgram = new GlProgram({\n            vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n            fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n            name: 'big-triangle',\n        });\n\n        this._bigTriangleShader = new Shader({\n            glProgram: bigTriangleProgram,\n            resources: {\n                uTexture: Texture.WHITE.source,\n            },\n        });\n    }\n\n    /**\n     * This is called before the RenderTargetSystem is started. This is where\n     * we replace the target with the back buffer if required.\n     * @param options - The options for this render.\n     */\n    protected renderStart(options: RenderOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n        this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n\n        if (this._useBackBufferThisRender)\n        {\n            const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n            this._targetTexture = renderTarget.colorTexture;\n\n            options.target = this._getBackBufferTexture(renderTarget.colorTexture);\n        }\n    }\n\n    protected renderEnd()\n    {\n        this._presentBackBuffer();\n    }\n\n    private _presentBackBuffer()\n    {\n        const renderer = this._renderer;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (!this._useBackBufferThisRender) return;\n\n        renderer.renderTarget.bind(this._targetTexture, false);\n\n        this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n\n        renderer.encoder.draw({\n            geometry: bigTriangleGeometry,\n            shader: this._bigTriangleShader,\n            state: this._state,\n        });\n    }\n\n    private _getBackBufferTexture(targetSourceTexture: TextureSource)\n    {\n        this._backBufferTexture = this._backBufferTexture || new Texture({\n            source: new TextureSource({\n                width: targetSourceTexture.width,\n                height: targetSourceTexture.height,\n                resolution: targetSourceTexture._resolution,\n                antialias: this._antialias,\n            }),\n        });\n\n        // this will not resize if its the same size already! No extra check required\n        this._backBufferTexture.source.resize(\n            targetSourceTexture.width,\n            targetSourceTexture.height,\n            targetSourceTexture._resolution,\n        );\n\n        return this._backBufferTexture;\n    }\n\n    /** destroys the back buffer */\n    public destroy()\n    {\n        if (this._backBufferTexture)\n        {\n            this._backBufferTexture.destroy();\n            this._backBufferTexture = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles color masking for the WebGL.\n * @memberof rendering\n */\nexport class GlColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGLRenderer;\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.gl.colorMask(\n            !!(colorMask & 0b1000),\n            !!(colorMask & 0b0100),\n            !!(colorMask & 0b0010),\n            !!(colorMask & 0b0001)\n        );\n    }\n\n    public destroy?: () => void;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles encoding commands for the WebGL.\n * @memberof rendering\n */\nexport class GlEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'encoder',\n    } as const;\n\n    public readonly commandFinished = Promise.resolve();\n    private readonly _renderer: WebGLRenderer;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setGeometry(geometry: Geometry, shader?: Shader)\n    {\n        this._renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public finishRenderPass()\n    {\n        // noop\n    }\n\n    public draw(options: {\n        geometry: Geometry,\n        shader: Shader,\n        state?: State,\n        topology?: Topology,\n        size?: number,\n        start?: number,\n        instanceCount?: number\n        skipSync?: boolean,\n    })\n    {\n        const renderer = this._renderer;\n        const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n\n        renderer.shader.bind(shader, skipSync);\n\n        renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n\n        if (state)\n        {\n            renderer.state.set(state);\n        }\n\n        renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GlStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private _gl: WebGLRenderingContext;\n\n    private readonly _stencilCache = {\n        enabled: false,\n        stencilReference: 0,\n        stencilMode: STENCIL_MODES.NONE,\n    };\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _stencilOpsMapping: {\n        keep: number;\n        zero: number;\n        replace: number;\n        invert: number;\n        'increment-clamp': number;\n        'decrement-clamp': number;\n        'increment-wrap': number;\n        'decrement-wrap': number;\n    };\n\n    private _comparisonFuncMapping: {\n        always: number;\n        never: number;\n        equal: number;\n        'not-equal': number;\n        less: number;\n        'less-equal': number;\n        greater: number;\n        'greater-equal': number;\n    };\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected contextChange(gl: WebGLRenderingContext)\n    {\n        // TODO - this could be declared in a gl const\n        // we know the numbers don't tend to change!\n        this._gl = gl;\n\n        this._comparisonFuncMapping = {\n            always: gl.ALWAYS,\n            never: gl.NEVER,\n            equal: gl.EQUAL,\n            'not-equal': gl.NOTEQUAL,\n            less: gl.LESS,\n            'less-equal': gl.LEQUAL,\n            greater: gl.GREATER,\n            'greater-equal': gl.GEQUAL,\n        };\n\n        this._stencilOpsMapping = {\n            keep: gl.KEEP,\n            zero: gl.ZERO,\n            replace: gl.REPLACE,\n            invert: gl.INVERT,\n            'increment-clamp': gl.INCR,\n            'decrement-clamp': gl.DECR,\n            'increment-wrap': gl.INCR_WRAP,\n            'decrement-wrap': gl.DECR_WRAP,\n        };\n\n        // reset stencil cache\n        this._stencilCache.enabled = false;\n        this._stencilCache.stencilMode = STENCIL_MODES.NONE;\n        this._stencilCache.stencilReference = 0;\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        if (this._activeRenderTarget === renderTarget) return;\n\n        this._activeRenderTarget = renderTarget;\n\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        // restore the current render targets stencil state..\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        const gl = this._gl;\n        const mode = GpuStencilModesToPixi[stencilMode];\n\n        const _stencilCache = this._stencilCache;\n\n        // store the stencil state for restoration later, if a render target changes\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        if (stencilMode === STENCIL_MODES.DISABLED)\n        {\n            if (this._stencilCache.enabled)\n            {\n                this._stencilCache.enabled = false;\n\n                gl.disable(gl.STENCIL_TEST);\n            }\n\n            return;\n        }\n\n        if (!this._stencilCache.enabled)\n        {\n            this._stencilCache.enabled = true;\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference)\n        {\n            _stencilCache.stencilMode = stencilMode;\n            _stencilCache.stencilReference = stencilReference;\n\n            // this is pretty simple mapping.\n            // will work for pixi's simple mask cases.\n            // although a true mapping of the GPU state to webGL state should be done\n            gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 0xFF);\n            gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n        }\n    }\n\n    public destroy?: () => void;\n}\n","import type { UboElement, UboLayout, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_TO_STD40_SIZE: Record<string, number> = {\n    f32: 4,\n    'vec2<f32>': 8,\n    'vec3<f32>': 12,\n    'vec4<f32>': 16,\n\n    'mat2x2<f32>': 16 * 2,\n    'mat3x3<f32>': 16 * 3,\n    'mat4x4<f32>': 16 * 4,\n\n    // TODO - not essential for now but support these in the future\n    // int:      4,\n    // ivec2:    8,\n    // ivec3:    12,\n    // ivec4:    16,\n\n    // uint:     4,\n    // uvec2:    8,\n    // uvec3:    12,\n    // uvec4:    16,\n\n    // bool:     4,\n    // bvec2:    8,\n    // bvec3:    12,\n    // bvec4:    16,\n\n    // mat2:     16 * 2,\n    // mat3:     16 * 3,\n    // mat4:     16 * 4,\n};\n\nexport function createUboElementsSTD40(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    let size = 0;\n    let chunkSize = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (!size)\n        {\n            throw new Error(`Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, 16) * uboElement.data.size;\n        }\n\n        uboElement.size = size;\n\n        // add some size offset..\n        // must align to the nearest 16 bytes or internally nearest round size\n        if (chunkSize % size !== 0 && chunkSize < 16)\n        {\n            // diff required to line up..\n            const lineUpValue = (chunkSize % size) % 16;\n\n            chunkSize += lineUpValue;\n            offset += lineUpValue;\n        }\n\n        if ((chunkSize + size) > 16)\n        {\n            offset = Math.ceil(offset / 16) * 16;\n            uboElement.offset = offset;\n            offset += size;\n            chunkSize = size;\n        }\n        else\n        {\n            uboElement.offset = offset;\n            chunkSize += size;\n            offset += size;\n        }\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the std140 layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncSTD40(uboElement: UboElement, offsetToAdd: number): string\n{\n    const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n    const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n\n    const remainder = (4 - (elementSize % 4)) % 4;\n\n    return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n        }\n    `;\n}\n","/* eslint-disable quote-props */\n\nimport { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsSTD40 } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncSTD40 } from './generateArraySyncSTD40';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function createUboSyncFunctionSTD40(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboStd40',\n        generateArraySyncSTD40,\n        uboSyncFunctionsSTD40,\n    );\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsSTD40 } from './shader/utils/createUboElementsSTD40';\nimport { createUboSyncFunctionSTD40 } from './shader/utils/createUboSyncSTD40';\n\n/**\n * System plugin to the renderer to manage uniform buffers. But with an WGSL adaptor.\n * @memberof rendering\n */\nexport class GlUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsSTD40,\n            generateUboSync: createUboSyncFunctionSTD40,\n        });\n    }\n}\n","/**\n * Represents a render target.\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTarget\n{\n    public width = -1;\n    public height = -1;\n    public msaa = false;\n    public framebuffer: WebGLFramebuffer;\n    public resolveTargetFramebuffer: WebGLFramebuffer;\n    public msaaRenderBuffer: WebGLRenderbuffer[] = [];\n    public depthStencilRenderBuffer: WebGLRenderbuffer;\n}\n","import { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { warn } from '../../../../utils/logging/warn';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource';\nimport { CLEAR } from '../const';\nimport { GlRenderTarget } from '../GlRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { CLEAR_OR_BOOL } from '../const';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGL renderer\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTargetAdaptor implements RenderTargetAdaptor<GlRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GlRenderTarget>;\n    private _renderer: WebGLRenderer<HTMLCanvasElement>;\n    private _clearColorCache: RgbaArray = [0, 0, 0, 0];\n    private _viewPortCache: Rectangle = new Rectangle();\n\n    public init(renderer: WebGLRenderer, renderTargetSystem: RenderTargetSystem<GlRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n\n        renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._clearColorCache = [0, 0, 0, 0];\n        this._viewPortCache = new Rectangle();\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const renderer = this._renderer;\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n        const gl = renderer.gl;\n\n        this.finishRenderPass(sourceRenderSurfaceTexture);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n\n        renderer.texture.bind(destinationTexture, 0);\n\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0,\n            originDest.x, originDest.y,\n            originSrc.x,\n            originSrc.y,\n            size.width,\n            size.height\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const source = renderTarget.colorTexture;\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        let viewPortY = viewport.y;\n\n        if (renderTarget.isRoot)\n        {\n            // /TODO this is the same logic?\n            viewPortY = source.pixelHeight - viewport.height;\n        }\n\n        // unbind the current render texture..\n        renderTarget.colorTextures.forEach((texture) =>\n        {\n            this._renderer.texture.unbind(texture);\n        });\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n\n        const viewPortCache = this._viewPortCache;\n\n        if (viewPortCache.x !== viewport.x\n            || viewPortCache.y !== viewPortY\n            || viewPortCache.width !== viewport.width\n            || viewPortCache.height !== viewport.height)\n        {\n            viewPortCache.x = viewport.x;\n            viewPortCache.y = viewPortY;\n            viewPortCache.width = viewport.width;\n            viewPortCache.height = viewport.height;\n\n            gl.viewport(\n                viewport.x,\n                viewPortY,\n                viewport.width,\n                viewport.height,\n            );\n        }\n\n        // if the stencil buffer has been requested, we need to create a stencil buffer\n        if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth))\n        {\n            this._initStencil(gpuRenderTarget);\n        }\n\n        this.clear(renderTarget, clear, clearColor);\n    }\n\n    public finishRenderPass(renderTarget?: RenderTarget)\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (!glRenderTarget.msaa) return;\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        gl.blitFramebuffer(\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            gl.COLOR_BUFFER_BIT, gl.NEAREST,\n        );\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        // dont think we need this anymore? keeping around just in case the wheels fall off\n        // gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GlRenderTarget\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n\n        // do single...\n\n        const glRenderTarget = new GlRenderTarget();\n\n        // we are rendering to the main canvas..\n        const colorTexture = renderTarget.colorTexture;\n\n        if (colorTexture.resource === renderer.canvas)\n        {\n            this._renderer.context.ensureCanvasSize(renderTarget.colorTexture.resource);\n\n            glRenderTarget.framebuffer = null;\n\n            return glRenderTarget;\n        }\n\n        this._initColor(renderTarget, glRenderTarget);\n\n        // set up a depth texture..\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        return glRenderTarget;\n    }\n\n    public destroyGpuRenderTarget(gpuRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        if (gpuRenderTarget.framebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.framebuffer);\n            gpuRenderTarget.framebuffer = null;\n        }\n\n        if (gpuRenderTarget.resolveTargetFramebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.resolveTargetFramebuffer);\n            gpuRenderTarget.resolveTargetFramebuffer = null;\n        }\n\n        if (gpuRenderTarget.depthStencilRenderBuffer)\n        {\n            gl.deleteRenderbuffer(gpuRenderTarget.depthStencilRenderBuffer);\n            gpuRenderTarget.depthStencilRenderBuffer = null;\n        }\n\n        gpuRenderTarget.msaaRenderBuffer.forEach((renderBuffer) =>\n        {\n            gl.deleteRenderbuffer(renderBuffer);\n        });\n\n        gpuRenderTarget.msaaRenderBuffer = null;\n    }\n\n    public clear(_renderTarget: RenderTarget, clear: CLEAR_OR_BOOL, clearColor?: RgbaArray)\n    {\n        if (!clear) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        // if clear is boolean..\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const gl = this._renderer.gl;\n\n        if (clear & CLEAR.COLOR)\n        {\n            clearColor ??= renderTargetSystem.defaultClearColor;\n\n            const clearColorCache = this._clearColorCache;\n            const clearColorArray = clearColor as number[];\n\n            if (clearColorCache[0] !== clearColorArray[0]\n                || clearColorCache[1] !== clearColorArray[1]\n                || clearColorCache[2] !== clearColorArray[2]\n                || clearColorCache[3] !== clearColorArray[3])\n            {\n                clearColorCache[0] = clearColorArray[0];\n                clearColorCache[1] = clearColorArray[1];\n                clearColorCache[2] = clearColorArray[2];\n                clearColorCache[3] = clearColorArray[3];\n\n                gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n            }\n        }\n\n        gl.clear(clear);\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        if (renderTarget.isRoot) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        this._resizeColor(renderTarget, glRenderTarget);\n\n        if (renderTarget.stencil || renderTarget.depth)\n        {\n            this._resizeStencil(glRenderTarget);\n        }\n    }\n\n    private _initColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n        // deal with our outputs..\n        const resolveTargetFramebuffer = gl.createFramebuffer();\n\n        glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n\n        // set up the texture..\n        gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n\n        glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n        glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            const source = colorTexture.source;\n\n            if (source.antialias)\n            {\n                if (renderer.context.supports.msaa)\n                {\n                    glRenderTarget.msaa = true;\n                }\n                else\n                {\n                    warn('[RenderTexture] Antialiasing on textures is not supported in WebGL1');\n                }\n            }\n\n            // TODO bindSource could return the glTexture\n            renderer.texture.bindSource(source, 0);\n            const glSource = renderer.texture.getGlSource(source);\n\n            const glTexture = glSource.texture;\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                3553, // texture.target,\n                glTexture,\n                0);// mipLevel);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const viewFramebuffer = gl.createFramebuffer();\n\n            glRenderTarget.framebuffer = viewFramebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((_, i) =>\n            {\n                const msaaRenderBuffer = gl.createRenderbuffer();\n\n                glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n            });\n        }\n        else\n        {\n            glRenderTarget.framebuffer = resolveTargetFramebuffer;\n        }\n\n        this._resizeColor(renderTarget, glRenderTarget);\n    }\n\n    private _resizeColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const source = renderTarget.colorTexture.source;\n\n        glRenderTarget.width = source.pixelWidth;\n        glRenderTarget.height = source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            // nno need to resize the first texture..\n            if (i === 0) return;\n\n            colorTexture.source.resize(source.width, source.height, source._resolution);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const renderer = this._renderer;\n            const gl = renderer.gl;\n\n            const viewFramebuffer = glRenderTarget.framebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const source = colorTexture.source;\n\n                renderer.texture.bindSource(source, 0);\n                const glSource = renderer.texture.getGlSource(source);\n\n                const glInternalFormat = glSource.internalFormat;\n\n                const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n\n                gl.bindRenderbuffer(\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n\n                gl.renderbufferStorageMultisample(\n                    gl.RENDERBUFFER,\n                    4,\n                    glInternalFormat,\n                    source.pixelWidth,\n                    source.pixelHeight\n                );\n\n                gl.framebufferRenderbuffer(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n            });\n        }\n    }\n\n    private _initStencil(glRenderTarget: GlRenderTarget)\n    {\n        // this already exists on the default screen\n        if (glRenderTarget.framebuffer === null) return;\n\n        const gl = this._renderer.gl;\n\n        const depthStencilRenderBuffer = gl.createRenderbuffer();\n\n        glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        gl.framebufferRenderbuffer(\n            gl.FRAMEBUFFER,\n            gl.DEPTH_STENCIL_ATTACHMENT,\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        // TDO DO>>\n        this._resizeStencil(glRenderTarget);\n    }\n\n    private _resizeStencil(glRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            glRenderTarget.depthStencilRenderBuffer\n        );\n\n        if (glRenderTarget.msaa)\n        {\n            gl.renderbufferStorageMultisample(\n                gl.RENDERBUFFER,\n                4,\n                gl.DEPTH24_STENCIL8,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n        else\n        {\n            gl.renderbufferStorage(\n                gl.RENDERBUFFER,\n                this._renderer.context.webGLVersion === 2\n                    ? gl.DEPTH24_STENCIL8\n                    : gl.DEPTH_STENCIL,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n    }\n\n    public postrender(renderTarget: RenderTarget)\n    {\n        // if multiView is not enabled, we don't need to do anything\n        if (!this._renderer.context.multiView) return;\n\n        // if the render target is a canvas, we need to copy the pixels from the gl canvas\n        // to the canvas target\n        if (CanvasSource.test(renderTarget.colorTexture.resource))\n        {\n            const contextCanvas = this._renderer.context.canvas;\n            const canvasSource = renderTarget.colorTexture as unknown as CanvasSource;\n\n            canvasSource.context2D.drawImage(\n                contextCanvas as CanvasImageSource,\n                0, canvasSource.pixelHeight - contextCanvas.height\n            );\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GlRenderTargetAdaptor } from './GlRenderTargetAdaptor';\n\nimport type { GlRenderTarget } from '../GlRenderTarget';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @memberof rendering\n */\nexport class GlRenderTargetSystem extends RenderTargetSystem<GlRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GlRenderTargetAdaptor();\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","import { BufferResource } from '../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\n\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { GlShaderSystem, ShaderSyncFunction } from './GlShaderSystem';\n\n/**\n * Generates the a function that will efficiently sync shader resources with the GPU.\n * @param shader - The shader to generate the code for\n * @param shaderSystem - An instance of the shader system\n */\nexport function generateShaderSyncCode(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n{\n    const funcFragments: string[] = [];\n\n    /**\n     * rS = renderer.shader\n     * sS = shaderSystem\n     * sD = shaderData\n     * g = shader.groups\n     * s = shader\n     * r = renderer\n     * ugS = renderer.uniformGroupSystem\n     */\n    const headerFragments: string[] = [`\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    `];\n\n    let addedTextreSystem = false;\n    let blockIndex = 0;\n    let textureCount = 0;\n\n    const programData = shaderSystem._getProgramData(shader.glProgram);\n\n    for (const i in shader.groups)\n    {\n        const group = shader.groups[i];\n\n        funcFragments.push(`\n            resources = g[${i}].resources;\n        `);\n\n        for (const j in group.resources)\n        {\n            const resource = group.resources[j];\n\n            if (resource instanceof UniformGroup)\n            {\n                if (resource.ubo)\n                {\n                    funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            sS._uniformBindMap[${i}[${j}],\n                            ${blockIndex++}\n                        );\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);\n                }\n            }\n            else if (resource instanceof BufferResource)\n            {\n                funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        sS._uniformBindMap[${i}[${j}],\n                        ${blockIndex++}\n                    );\n                `);\n            }\n            else if (resource instanceof TextureSource)\n            {\n                const uniformName = shader._uniformBindMap[i as unknown as number][j as unknown as number];\n\n                const uniformData = programData.uniformData[uniformName];\n\n                if (uniformData)\n                {\n                    if (!addedTextreSystem)\n                    {\n                        addedTextreSystem = true;\n                        headerFragments.push(`\n                        var tS = r.texture;\n                        `);\n                    }\n\n                    shaderSystem._gl.uniform1i(uniformData.location, textureCount);\n\n                    funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `);\n\n                    textureCount++;\n                }\n            }\n        }\n    }\n\n    const functionSource = [...headerFragments, ...funcFragments].join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('r', 's', 'sD', functionSource) as ShaderSyncFunction;\n}\n","/**\n * @private\n */\nexport class IGLUniformData\n{\n    public location: WebGLUniformLocation;\n    public value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\n}\n\n/**\n * Helper class to create a WebGL Program\n * @private\n */\nexport class GlProgramData\n{\n    /** The shader program. */\n    public program: WebGLProgram;\n\n    /**\n     * Holds the uniform data which contains uniform locations\n     * and current uniform values used for caching and preventing unneeded GPU commands.\n     */\n    public uniformData: Record<string, any>;\n\n    /**\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\n     * and program have a unique upload function generated.\n     */\n    public uniformGroups: Record<string, any>;\n\n    /** A hash that stores where UBOs are bound to on the program. */\n    public uniformBlockBindings: Record<string, any>;\n\n    /** A hash for lazily-generated uniform uploading functions. */\n    public uniformSync: Record<string, any>;\n\n    /**\n     * A place where dirty ticks are stored for groups\n     * If a tick here does not match with the Higher level Programs tick, it means\n     * we should re upload the data.\n     */\n    public uniformDirtyGroups: Record<string, any>;\n\n    /**\n     * Makes a new Pixi program.\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */\n    constructor(program: WebGLProgram, uniformData: {[key: string]: IGLUniformData})\n    {\n        this.program = program;\n        this.uniformData = uniformData;\n        this.uniformGroups = {};\n        this.uniformDirtyGroups = {};\n        this.uniformBlockBindings = {};\n    }\n\n    /** Destroys this program. */\n    public destroy(): void\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.uniformDirtyGroups = null;\n        this.uniformBlockBindings = null;\n        this.program = null;\n    }\n}\n","/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @returns {WebGLShader} the shader\n */\nexport function compileShader(gl: WebGLRenderingContextBase, type: number, src: string): WebGLShader\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n}\n","function booleanArray(size: number): Array<boolean>\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n\n/**\n * @method defaultValue\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function defaultValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'uint':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'uvec2':\n            return new Uint32Array(2 * size);\n\n        case 'uvec3':\n            return new Uint32Array(3 * size);\n\n        case 'uvec4':\n            return new Uint32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n","import type { Dict } from '../../../../../utils/types';\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\nconst GLSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    float: 'float32',\n    vec2: 'float32x2',\n    vec3: 'float32x3',\n    vec4: 'float32x4',\n\n    int: 'sint32',\n    ivec2: 'sint32x2',\n    ivec3: 'sint32x3',\n    ivec4: 'sint32x4',\n\n    uint: 'uint32',\n    uvec2: 'uint32x2',\n    uvec3: 'uint32x3',\n    uvec4: 'uint32x4',\n\n    bool: 'uint32',\n    bvec2: 'uint32x2',\n    bvec3: 'uint32x3',\n    bvec4: 'uint32x4',\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n\nexport function mapGlToVertexFormat(gl: any, type: number): VertexFormat\n{\n    const typeValue = mapType(gl, type);\n\n    return GLSL_TO_VERTEX_TYPES[typeValue] || 'float32';\n}\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { mapGlToVertexFormat } from './mapType';\n\nimport type { Attribute } from '../../../shared/geometry/Geometry';\n\nexport interface ExtractedAttributeData extends Omit<Attribute, 'buffer'>\n{\n    /** set where the shader location is for this attribute */\n    location?: number;\n}\n\n/**\n * returns the attribute data from the program\n * @private\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n * @returns {object} the attribute data for this program\n */\n\nexport function extractAttributesFromGlProgram(\n    program: WebGLProgram,\n    gl: WebGLRenderingContextBase,\n    sortAttributes = false\n): Record<string, ExtractedAttributeData>\n{\n    const attributes: {[key: string]: ExtractedAttributeData} = {};\n\n    const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < totalAttributes; i++)\n    {\n        const attribData = gl.getActiveAttrib(program, i);\n\n        // ignore the default ones!\n        if (attribData.name.startsWith('gl_'))\n        {\n            continue;\n        }\n\n        const format = mapGlToVertexFormat(gl, attribData.type);\n\n        attributes[attribData.name] = {\n            location: 0, // set further down..\n            format,\n            stride: getAttributeInfoFromFormat(format).stride,\n            offset: 0,\n            instance: false,\n            start: 0,\n        };\n    }\n\n    const keys = Object.keys(attributes);\n\n    if (sortAttributes)\n    {\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = i;\n\n            gl.bindAttribLocation(program, i, keys[i]);\n        }\n\n        gl.linkProgram(program);\n    }\n    else\n    {\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = gl.getAttribLocation(program, keys[i]);\n        }\n    }\n\n    return attributes;\n}\n","import type { GlUniformBlockData } from '../GlProgram';\n\n/**\n * returns the uniform block data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUboData(program: WebGLProgram, gl: WebGL2RenderingContext): Record<string, GlUniformBlockData>\n{\n    // if uniform buffer data is not supported, early out\n    if (!gl.ACTIVE_UNIFORM_BLOCKS) return {};\n\n    const uniformBlocks: Record<string, GlUniformBlockData> = {};\n\n    // const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    const totalUniformsBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\n    for (let i = 0; i < totalUniformsBlocks; i++)\n    {\n        const name = gl.getActiveUniformBlockName(program, i);\n        const uniformBlockIndex = gl.getUniformBlockIndex(program, name);\n\n        const size = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE);\n\n        uniformBlocks[name] = {\n            name,\n            index: uniformBlockIndex,\n            size,\n        };\n    }\n\n    return uniformBlocks;\n}\n","import { defaultValue } from './defaultValue';\nimport { mapType } from './mapType';\n\nimport type { GlUniformData } from '../GlProgram';\n\n/**\n * returns the uniform data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUniformData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: GlUniformData}\n{\n    const uniforms: {[key: string]: GlUniformData} = {};\n\n    const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < totalUniforms; i++)\n    {\n        const uniformData = gl.getActiveUniform(program, i);\n        const name = uniformData.name.replace(/\\[.*?\\]$/, '');\n\n        const isArray = !!(uniformData.name.match(/\\[.*?\\]$/));\n\n        const type = mapType(gl, uniformData.type);\n\n        uniforms[name] = {\n            name,\n            index: i,\n            type,\n            size: uniformData.size,\n            isArray,\n            value: defaultValue(type, uniformData.size),\n        };\n    }\n\n    return uniforms;\n}\n","/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n * @private\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n","import { warn } from '../../../../../utils/logging/warn';\nimport { GlProgramData } from '../GlProgramData';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram';\nimport { getUboData } from './getUboData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlProgram } from '../GlProgram';\nimport type { IGLUniformData } from '../GlProgramData';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n * @private\n */\nexport function generateProgram(gl: GlRenderingContext, program: GlProgram): GlProgramData\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    program._attributeData = extractAttributesFromGlProgram(\n        webGLProgram,\n        gl,\n        !(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertex)\n    );\n\n    program._uniformData = getUniformData(webGLProgram, gl);\n    program._uniformBlockData = getUboData(webGLProgram, gl);\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program._uniformData)\n    {\n        const data = program._uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GlProgramData(webGLProgram, uniformData);\n\n    return glProgram;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { getMaxTexturesPerBatch } from '../../../batcher/gl/utils/maxRecommendedTextures';\nimport { generateShaderSyncCode } from './GenerateShaderSyncCode';\nimport { generateProgram } from './program/generateProgram';\n\nimport type { BufferResource } from '../../shared/buffer/BufferResource';\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { ShaderSystem } from '../../shared/shader/ShaderSystem';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram } from './GlProgram';\nimport type { GlProgramData } from './GlProgramData';\n\nexport interface ShaderSyncData\n{\n    textureCount: number;\n    blockIndex: number;\n}\n\nexport type ShaderSyncFunction = (renderer: WebGLRenderer, shader: Shader, syncData: ShaderSyncData) => void;\n\n// default sync data so we don't create a new one each time!\nconst defaultSyncData: ShaderSyncData = {\n    textureCount: 0,\n    blockIndex: 0,\n};\n\n/**\n * System plugin to the renderer to manage the shaders for WebGL.\n * @memberof rendering\n */\nexport class GlShaderSystem implements ShaderSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    public maxTextures: number;\n\n    /**\n     * @internal\n     * @private\n     */\n    public _activeProgram: GlProgram = null;\n\n    private _programDataHash: Record<string, GlProgramData> = Object.create(null);\n    private readonly _renderer: WebGLRenderer;\n    public _gl: WebGL2RenderingContext;\n    private _maxBindings: number;\n    private _nextIndex = 0;\n    private _boundUniformsIdsToIndexHash: Record<number, number> = Object.create(null);\n    private _boundIndexToUniformsHash: Record<number, UniformGroup | BufferResource> = Object.create(null);\n    private _shaderSyncFunctions: Record<string, ShaderSyncFunction> = Object.create(null);\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_programDataHash');\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        this._maxBindings = gl.MAX_UNIFORM_BUFFER_BINDINGS ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;\n\n        this._programDataHash = Object.create(null);\n        this._boundUniformsIdsToIndexHash = Object.create(null);\n        this._boundIndexToUniformsHash = Object.create(null);\n        /**\n         * these need to also be cleared as internally some uniforms are set as an optimisation as the sync\n         * function is generated. Specifically the texture ints.\n         */\n        this._shaderSyncFunctions = Object.create(null);\n        this._activeProgram = null;\n\n        this.maxTextures = getMaxTexturesPerBatch();\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param skipSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    public bind(shader: Shader, skipSync?: boolean): void\n    {\n        this._setProgram(shader.glProgram);\n\n        if (skipSync) return;\n\n        defaultSyncData.textureCount = 0;\n        defaultSyncData.blockIndex = 0;\n\n        let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n\n        if (!syncFunction)\n        {\n            syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n        }\n\n        syncFunction(this._renderer, shader, defaultSyncData);\n    }\n\n    /**\n     * Updates the uniform group.\n     * @param uniformGroup - the uniform group to update\n     */\n    public updateUniformGroup(uniformGroup: UniformGroup): void\n    {\n        this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n    }\n\n    /**\n     * Binds a uniform block to the shader.\n     * @param uniformGroup - the uniform group to bind\n     * @param name - the name of the uniform block\n     * @param index - the index of the uniform block\n     */\n    public bindUniformBlock(uniformGroup: UniformGroup | BufferResource, name: string, index = 0): void\n    {\n        const bufferSystem = this._renderer.buffer;\n        const programData = this._getProgramData(this._activeProgram);\n\n        const isBufferResource = (uniformGroup as BufferResource)._bufferResource;\n\n        if (isBufferResource)\n        {\n            this._renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n        }\n\n        bufferSystem.updateBuffer(uniformGroup.buffer);\n\n        let boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid];\n\n        // check if it is already bound..\n        if (boundIndex === undefined)\n        {\n            const nextIndex = this._nextIndex++ % this._maxBindings;\n\n            const currentBoundUniformGroup = this._boundIndexToUniformsHash[nextIndex];\n\n            if (currentBoundUniformGroup)\n            {\n                this._boundUniformsIdsToIndexHash[currentBoundUniformGroup.uid] = undefined;\n            }\n\n            // find a free slot..\n            boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid] = nextIndex;\n            this._boundIndexToUniformsHash[nextIndex] = uniformGroup;\n\n            if (isBufferResource)\n            {\n                bufferSystem.bindBufferRange(uniformGroup.buffer, nextIndex, (uniformGroup as BufferResource).offset);\n            }\n            else\n            {\n                bufferSystem.bindBufferBase(uniformGroup.buffer, nextIndex);\n            }\n        }\n\n        const gl = this._gl;\n\n        const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n\n        if (programData.uniformBlockBindings[index] === boundIndex) return;\n        programData.uniformBlockBindings[index] = boundIndex;\n\n        gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundIndex);\n    }\n\n    private _setProgram(program: GlProgram)\n    {\n        if (this._activeProgram === program) return;\n\n        this._activeProgram = program;\n\n        const programData = this._getProgramData(program);\n\n        this._gl.useProgram(programData.program);\n    }\n\n    /**\n     * @param program - the program to get the data for\n     * @internal\n     * @private\n     */\n    public _getProgramData(program: GlProgram): GlProgramData\n    {\n        return this._programDataHash[program._key] || this._createProgramData(program);\n    }\n\n    private _createProgramData(program: GlProgram): GlProgramData\n    {\n        const key = program._key;\n\n        this._programDataHash[key] = generateProgram(this._gl, program);\n\n        return this._programDataHash[key];\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._programDataHash))\n        {\n            const programData = this._programDataHash[key];\n\n            programData.destroy();\n            this._programDataHash[key] = null;\n        }\n\n        this._programDataHash = null;\n        this._boundUniformsIdsToIndexHash = null;\n    }\n\n    /**\n     * Creates a function that can be executed that will sync the shader as efficiently as possible.\n     * Overridden by the unsafe eval package if you don't want eval used in your project.\n     * @param shader - the shader to generate the sync function for\n     * @param shaderSystem - the shader system to use\n     * @returns - the generated sync function\n     * @ignore\n     */\n    public _generateShaderSync(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n    {\n        return generateShaderSyncCode(shader, shaderSystem);\n    }\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport type { UNIFORM_TYPES } from '../../../shared/shader/types';\n\nexport type ArraySetterFunction = (v: any, location: WebGLUniformLocation, gl: any) => void;\n\nexport const UNIFORM_TO_SINGLE_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }`,\n    'vec2<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }`,\n    'vec3<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }`,\n    i32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    u32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }`,\n    'vec2<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }`,\n    'vec3<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }`,\n    bool: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n};\n\nexport const UNIFORM_TO_ARRAY_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `gl.uniform1fv(location, v);`,\n    'vec2<f32>': `gl.uniform2fv(location, v);`,\n    'vec3<f32>': `gl.uniform3fv(location, v);`,\n    'vec4<f32>': `gl.uniform4fv(location, v);`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n    i32: `gl.uniform1iv(location, v);`,\n    'vec2<i32>': `gl.uniform2iv(location, v);`,\n    'vec3<i32>': `gl.uniform3iv(location, v);`,\n    'vec4<i32>': `gl.uniform4iv(location, v);`,\n    u32: `gl.uniform1iv(location, v);`,\n    'vec2<u32>': `gl.uniform2iv(location, v);`,\n    'vec3<u32>': `gl.uniform3iv(location, v);`,\n    'vec4<u32>': `gl.uniform4iv(location, v);`,\n    bool: `gl.uniform1iv(location, v);`,\n    'vec2<bool>': `gl.uniform2iv(location, v);`,\n    'vec3<bool>': `gl.uniform3iv(location, v);`,\n    'vec4<bool>': `gl.uniform4iv(location, v);`,\n};\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport { BufferResource } from '../../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../../shared/shader/UniformGroup';\nimport { uniformParsers } from '../../../shared/shader/utils/uniformParsers';\nimport { UNIFORM_TO_ARRAY_SETTERS, UNIFORM_TO_SINGLE_SETTERS } from './generateUniformsSyncTypes';\n\nimport type { UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function generateUniformsSync(group: UniformGroup, uniformData: Record<string, any>): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    `];\n\n    for (const i in group.uniforms)\n    {\n        if (!uniformData[i])\n        {\n            if (group.uniforms[i] instanceof UniformGroup)\n            {\n                if ((group.uniforms[i] as UniformGroup).ubo)\n                {\n                    funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, \"${i}\");\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `);\n                }\n            }\n            else if (group.uniforms[i] instanceof BufferResource)\n            {\n                funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, \"${i}\");\n                    `);\n            }\n\n            continue;\n        }\n\n        const uniform = group.uniformStructures[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                funcFragments.push(`name = \"${i}\";`, uniformParsers[j].uniform);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            const templateType = uniform.size === 1 ? UNIFORM_TO_SINGLE_SETTERS : UNIFORM_TO_ARRAY_SETTERS;\n\n            const template = templateType[uniform.type].replace('location', `ud[\"${i}\"].location`);\n\n            funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n        }\n    }\n\n    /*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */\n    // eslint-disable-next-line no-new-func\n    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\\n')) as UniformsSyncCallback;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateUniformsSync } from './utils/generateUniformsSync';\n\nimport type { UniformsSyncCallback } from '../../shared/shader/types';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram, GlUniformData } from './GlProgram';\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof rendering\n */\nexport class GlUniformGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'uniformGroup',\n    } as const;\n\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: GlRenderingContext;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private _cache: Record<string, UniformsSyncCallback> = {};\n    private _renderer: WebGLRenderer;\n\n    private _uniformGroupSyncHash: Record<string, Record<string, UniformsSyncCallback>> = {};\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.gl = null;\n        this._cache = {};\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param group - the uniforms values that be applied to the current shader\n     * @param program\n     * @param syncData\n     * @param syncData.textureCount\n     */\n    public updateUniformGroup(group: UniformGroup, program: GlProgram, syncData: { textureCount: number }): void\n    {\n        const programData = this._renderer.shader._getProgramData(program);\n\n        if (!group.isStatic || group._dirtyId !== programData.uniformDirtyGroups[group.uid])\n        {\n            programData.uniformDirtyGroups[group.uid] = group._dirtyId;\n\n            const syncFunc = this._getUniformSyncFunction(group, program);\n\n            syncFunc(programData.uniformData, group.uniforms, this._renderer, syncData);\n        }\n    }\n\n    /**\n     * Overridable by the pixi.js/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param program\n     */\n    private _getUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        return this._uniformGroupSyncHash[group._signature]?.[program._key]\n            || this._createUniformSyncFunction(group, program);\n    }\n\n    private _createUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        const uniformGroupSyncHash = this._uniformGroupSyncHash[group._signature]\n            || (this._uniformGroupSyncHash[group._signature] = {});\n\n        const id = this._getSignature(group, program._uniformData, 'u');\n\n        if (!this._cache[id])\n        {\n            this._cache[id] = this._generateUniformsSync(group, program._uniformData);\n        }\n\n        uniformGroupSyncHash[program._key] = this._cache[id];\n\n        return uniformGroupSyncHash[program._key];\n    }\n\n    private _generateUniformsSync(group: UniformGroup, uniformData: Record<string, GlUniformData>): UniformsSyncCallback\n    {\n        return generateUniformsSync(group, uniformData);\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private _getSignature(group: UniformGroup, uniformData: Record<string, any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /** Destroys this System and removes all its textures. */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._cache = null;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @param gl\n * @returns {object} Map of gl blend combinations to WebGL.\n */\nexport function mapWebGLBlendModesToPixi(gl: GlRenderingContext): Record<BLEND_MODES, number[]>\n{\n    const blendMap: Partial<Record<BLEND_MODES, number[]>> = {};\n\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.add = [gl.ONE, gl.ONE];\n    blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.none = [0, 0];\n\n    // not-premultiplied blend modes\n    blendMap['normal-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap['add-npm'] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    blendMap['screen-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n\n    const isWebGl2 = !(gl instanceof DOMAdapter.get().getWebGLRenderingContext());\n\n    if (isWebGl2)\n    {\n        blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MIN, gl.MIN];\n        blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MAX, gl.MAX];\n    }\n    else\n    {\n        const ext = gl.getExtension('EXT_blend_minmax');\n\n        if (ext)\n        {\n            blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MIN_EXT, ext.MIN_EXT];\n            blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MAX_EXT, ext.MAX_EXT];\n        }\n    }\n\n    // TODO - implement if requested!\n    // composite operations\n    // array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    // array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    // array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    // array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // SUBTRACT from flash\n    // array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return blendMap as Record<BLEND_MODES, number[]>;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines\n * @memberof rendering\n */\nexport class GlStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'state',\n    } as const;\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: GlRenderingContext;\n\n    protected blendModesMap: Record<BLEND_MODES, number[]>;\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: ((value: boolean) => void)[];\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: ((system: this, state: State) => void)[];\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 'none';\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = State.for2d();\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    public set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    public forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    public setBlend(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    public setOffset(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    public setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    public setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    public setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    public setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    public setBlendMode(value: BLEND_MODES): void\n    {\n        if (!this.blendModesMap[value])\n        {\n            value = 'normal';\n        }\n\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModesMap[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    public setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    public reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        // setting to '' means the blend mode will be set as soon as we set the first blend mode when rendering!\n        this.blendMode = '' as BLEND_MODES;\n        this.setBlendMode('normal');\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    private _updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkBlendMode(system: GlStateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkPolygonOffset(system: GlStateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this.gl = null;\n        this.checks.length = 0;\n    }\n}\n","import { GL_FORMATS, GL_TARGETS, GL_TYPES } from './const';\n\n/**\n * Internal texture for WebGL context\n * @memberof rendering\n * @ignore\n */\nexport class GlTexture\n{\n    public target: GL_TARGETS = GL_TARGETS.TEXTURE_2D;\n\n    /** The WebGL texture. */\n    public texture: WebGLTexture;\n\n    /** Width of texture that was used in texImage2D. */\n    public width: number;\n\n    /** Height of texture that was used in texImage2D. */\n    public height: number;\n\n    /** Whether mip levels has to be generated. */\n    public mipmap: boolean;\n\n    /** Type copied from texture source. */\n    public type: number;\n\n    /** Type copied from texture source. */\n    public internalFormat: number;\n\n    /** Type of sampler corresponding to this texture. See {@link SAMPLER_TYPES} */\n    public samplerType: number;\n\n    public format: GL_FORMATS;\n\n    constructor(texture: WebGLTexture)\n    {\n        this.texture = texture;\n        this.width = -1;\n        this.height = -1;\n        this.type = GL_TYPES.UNSIGNED_BYTE;\n        this.internalFormat = GL_FORMATS.RGBA;\n        this.format = GL_FORMATS.RGBA;\n        this.samplerType = 0;\n    }\n}\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadBufferImageResource = {\n\n    id: 'buffer',\n\n    upload(source: TextureSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        if (glTexture.width === source.width || glTexture.height === source.height)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                source.width,\n                source.height,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                source.width,\n                source.height,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n\n        glTexture.width = source.width;\n        glTexture.height = source.height;\n    }\n} as GLTextureUploader;\n\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nconst compressedFormatMap: Record<string, boolean> = {\n    'bc1-rgba-unorm': true,\n    'bc1-rgba-unorm-srgb': true,\n    'bc2-rgba-unorm': true,\n    'bc2-rgba-unorm-srgb': true,\n    'bc3-rgba-unorm': true,\n    'bc3-rgba-unorm-srgb': true,\n    'bc4-r-unorm': true,\n    'bc4-r-snorm': true,\n    'bc5-rg-unorm': true,\n    'bc5-rg-snorm': true,\n    'bc6h-rgb-ufloat': true,\n    'bc6h-rgb-float': true,\n    'bc7-rgba-unorm': true,\n    'bc7-rgba-unorm-srgb': true,\n\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'etc2-rgb8unorm': true,\n    'etc2-rgb8unorm-srgb': true,\n    'etc2-rgb8a1unorm': true,\n    'etc2-rgb8a1unorm-srgb': true,\n    'etc2-rgba8unorm': true,\n    'etc2-rgba8unorm-srgb': true,\n    'eac-r11unorm': true,\n    'eac-r11snorm': true,\n    'eac-rg11unorm': true,\n    'eac-rg11snorm': true,\n\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'astc-4x4-unorm': true,\n    'astc-4x4-unorm-srgb': true,\n    'astc-5x4-unorm': true,\n    'astc-5x4-unorm-srgb': true,\n    'astc-5x5-unorm': true,\n    'astc-5x5-unorm-srgb': true,\n    'astc-6x5-unorm': true,\n    'astc-6x5-unorm-srgb': true,\n    'astc-6x6-unorm': true,\n    'astc-6x6-unorm-srgb': true,\n    'astc-8x5-unorm': true,\n    'astc-8x5-unorm-srgb': true,\n    'astc-8x6-unorm': true,\n    'astc-8x6-unorm-srgb': true,\n    'astc-8x8-unorm': true,\n    'astc-8x8-unorm-srgb': true,\n    'astc-10x5-unorm': true,\n    'astc-10x5-unorm-srgb': true,\n    'astc-10x6-unorm': true,\n    'astc-10x6-unorm-srgb': true,\n    'astc-10x8-unorm': true,\n    'astc-10x8-unorm-srgb': true,\n    'astc-10x10-unorm': true,\n    'astc-10x10-unorm-srgb': true,\n    'astc-12x10-unorm': true,\n    'astc-12x10-unorm-srgb': true,\n    'astc-12x12-unorm': true,\n    'astc-12x12-unorm-srgb': true,\n};\n\nexport const glUploadCompressedTextureResource = {\n\n    id: 'compressed',\n\n    upload(source: CompressedSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const compressed = !!compressedFormatMap[source.format];\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            if (compressed)\n            {\n                gl.compressedTexImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    levelBuffer\n                );\n            }\n            else\n            {\n                gl.texImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    glTexture.format, glTexture.type,\n                    levelBuffer);\n            }\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GLTextureUploader;\n\n","import type { CanvasSource } from '../../../shared/texture/sources/CanvasSource';\nimport type { ImageSource } from '../../../shared/texture/sources/ImageSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadImageResource = {\n\n    id: 'image',\n\n    upload(source: ImageSource | CanvasSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n\n        const glWidth = glTexture.width;\n        const glHeight = glTexture.height;\n\n        const textureWidth = source.pixelWidth;\n        const textureHeight = source.pixelHeight;\n\n        const resourceWidth = source.resourceWidth;\n        const resourceHeight = source.resourceHeight;\n\n        if (resourceWidth < textureWidth || resourceHeight < textureHeight)\n        {\n            if (glWidth !== textureWidth || glHeight !== textureHeight)\n            {\n                gl.texImage2D(\n                    glTexture.target,\n                    0,\n                    glTexture.internalFormat,\n                    textureWidth,\n                    textureHeight,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    null\n                );\n            }\n\n            if (webGLVersion === 2)\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    resourceWidth,\n                    resourceHeight,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n            else\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n        }\n        else if (glWidth === textureWidth || glHeight === textureHeight)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else if (webGLVersion === 2)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                textureWidth,\n                textureHeight,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n\n        glTexture.width = textureWidth;\n        glTexture.height = textureHeight;\n    }\n} as GLTextureUploader;\n\n","import { glUploadImageResource } from './glUploadImageResource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadVideoResource = {\n\n    id: 'video',\n\n    upload(source: VideoSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        if (!source.isValid)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                1,\n                1,\n                0,\n                glTexture.format,\n                glTexture.type,\n                null\n            );\n\n            return;\n        }\n\n        glUploadImageResource.upload(source, glTexture, gl, webGLVersion);\n    }\n} as GLTextureUploader;\n\n","export const scaleModeToGlFilter = {\n    linear: 9729,\n    nearest: 9728,\n};\n\nexport const mipmapScaleModeToGlFilter = {\n    linear: {\n        linear: 9987,\n        nearest: 9985,\n    },\n    nearest: {\n        linear: 9986,\n        nearest: 9984,\n    }\n};\n\nexport const wrapModeToGlAddress = {\n    'clamp-to-edge': 33071,\n    repeat: 10497,\n    'mirror-repeat': 33648,\n};\n\nexport const compareModeToGlCompare = {\n    never: 512,\n    less: 513,\n    equal: 514,\n    'less-equal': 515,\n    greater: 516,\n    'not-equal': 517,\n    'greater-equal': 518,\n    always: 519,\n};\n\n","import {\n    compareModeToGlCompare,\n    mipmapScaleModeToGlFilter,\n    scaleModeToGlFilter,\n    wrapModeToGlAddress\n} from './pixiToGlMaps';\n\nimport type { TextureStyle } from '../../../shared/texture/TextureStyle';\n\nexport function applyStyleParams(\n    style: TextureStyle,\n    gl: WebGL2RenderingContext,\n    mipmaps: boolean,\n    // eslint-disable-next-line camelcase\n    anisotropicExt: EXT_texture_filter_anisotropic,\n    glFunctionName: 'samplerParameteri' | 'texParameteri',\n    firstParam: 3553 | WebGLSampler,\n    forceClamp: boolean,\n    /** if true we can skip setting certain values if the values is the same as the default gl values */\n    firstCreation: boolean\n)\n{\n    const castParam = firstParam as 3553;\n\n    if (!firstCreation\n        || style.addressModeU !== 'repeat'\n        || style.addressModeV !== 'repeat'\n        || style.addressModeW !== 'repeat'\n    )\n    {\n        // 1. set the wrapping mode\n        const wrapModeS = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeU];\n        const wrapModeT = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeV];\n        const wrapModeR = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeW];\n\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_S, wrapModeS);\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_T, wrapModeT);\n\n        // does not exist in webGL1\n        if (gl.TEXTURE_WRAP_R) gl[glFunctionName](castParam, gl.TEXTURE_WRAP_R, wrapModeR);\n    }\n\n    if (!firstCreation || style.magFilter !== 'linear')\n    {\n        // 2. set the filtering mode\n        gl[glFunctionName](castParam, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.magFilter]);\n    }\n\n    // assuming the currently bound texture is the one we want to set the filter for\n    // the only smelly part of this code, WebGPU is much better here :P\n    if (mipmaps)\n    {\n        if (!firstCreation || style.mipmapFilter !== 'linear')\n        {\n            const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n\n            gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, glFilterMode);\n        }\n    }\n\n    else\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.minFilter]);\n    }\n\n    // 3. set the anisotropy\n    if (anisotropicExt && style.maxAnisotropy > 1)\n    {\n        const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n        gl[glFunctionName](castParam, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n    }\n\n    // 4. set the compare mode\n    if (style.compare)\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n    }\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlFormat(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.RED,\n        r8snorm: gl.RED,\n        r8uint: gl.RED,\n        r8sint: gl.RED,\n\n        // 16-bit formats\n        r16uint: gl.RED,\n        r16sint:    gl.RED,\n        r16float: gl.RED,\n        rg8unorm:  gl.RG,\n        rg8snorm:   gl.RG,\n        rg8uint:  gl.RG,\n        rg8sint:  gl.RG,\n\n        // 32-bit formats\n        r32uint: gl.RED,\n        r32sint: gl.RED,\n        r32float: gl.RED,\n        rg16uint:   gl.RG,\n        rg16sint:  gl.RG,\n        rg16float:  gl.RG,\n        rgba8unorm: gl.RGBA,\n        'rgba8unorm-srgb': gl.RGBA,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA,\n        rgba8uint: gl.RGBA,\n        rgba8sint: gl.RGBA,\n        bgra8unorm: gl.RGBA,\n        'bgra8unorm-srgb': gl.RGBA,\n        rgb9e5ufloat: gl.RGB,\n        rgb10a2unorm: gl.RGBA,\n        rg11b10ufloat: gl.RGB,\n\n        // 64-bit formats\n        rg32uint: gl.RG,\n        rg32sint: gl.RG,\n        rg32float:  gl.RG,\n        rgba16uint: gl.RGBA,\n        rgba16sint: gl.RGBA,\n        rgba16float: gl.RGBA,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA,\n        rgba32sint: gl.RGBA,\n        rgba32float: gl.RGBA,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT,\n        depth24plus: gl.DEPTH_COMPONENT,\n        'depth24plus-stencil8': gl.DEPTH_STENCIL,\n        depth32float: gl.DEPTH_COMPONENT,\n        'depth32float-stencil8': gl.DEPTH_STENCIL,\n\n    };\n}\n","import { DOMAdapter } from '../../../../../environment/adapter';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { WebGLExtensions } from '../../context/WebGLExtensions';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param gl - The rendering context.\n * @param extensions - The WebGL extensions.\n * @returns Lookup table.\n */\nexport function mapFormatToGlInternalFormat(\n    gl: GlRenderingContext,\n    extensions: WebGLExtensions,\n): Record<string, number>\n{\n    let srgb = {};\n    let bgra8unorm: number = gl.RGBA;\n\n    if (!(gl instanceof DOMAdapter.get().getWebGLRenderingContext()))\n    {\n        srgb = {\n            'rgba8unorm-srgb': gl.SRGB8_ALPHA8,\n            'bgra8unorm-srgb': gl.SRGB8_ALPHA8,\n        };\n\n        bgra8unorm = gl.RGBA8;\n    }\n    else if (extensions.srgb)\n    {\n        srgb = {\n            'rgba8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n            'bgra8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n        };\n    }\n\n    return {\n        // 8-bit formats\n        r8unorm: gl.R8,\n        r8snorm: gl.R8_SNORM,\n        r8uint: gl.R8UI,\n        r8sint: gl.R8I,\n\n        // 16-bit formats\n        r16uint: gl.R16UI,\n        r16sint: gl.R16I,\n        r16float: gl.R16F,\n        rg8unorm: gl.RG8,\n        rg8snorm: gl.RG8_SNORM,\n        rg8uint: gl.RG8UI,\n        rg8sint: gl.RG8I,\n\n        // 32-bit formats\n        r32uint: gl.R32UI,\n        r32sint: gl.R32I,\n        r32float: gl.R32F,\n        rg16uint: gl.RG16UI,\n        rg16sint: gl.RG16I,\n        rg16float: gl.RG16F,\n        rgba8unorm: gl.RGBA,\n\n        ...srgb,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA8_SNORM,\n        rgba8uint: gl.RGBA8UI,\n        rgba8sint: gl.RGBA8I,\n        bgra8unorm,\n        rgb9e5ufloat: gl.RGB9_E5,\n        rgb10a2unorm: gl.RGB10_A2,\n        rg11b10ufloat: gl.R11F_G11F_B10F,\n\n        // 64-bit formats\n        rg32uint: gl.RG32UI,\n        rg32sint: gl.RG32I,\n        rg32float: gl.RG32F,\n        rgba16uint: gl.RGBA16UI,\n        rgba16sint: gl.RGBA16I,\n        rgba16float: gl.RGBA16F,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA32UI,\n        rgba32sint: gl.RGBA32I,\n        rgba32float: gl.RGBA32F,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT16,\n        depth24plus: gl.DEPTH_COMPONENT24,\n        'depth24plus-stencil8': gl.DEPTH24_STENCIL8,\n        depth32float: gl.DEPTH_COMPONENT32F,\n        'depth32float-stencil8': gl.DEPTH32F_STENCIL8,\n\n        // Compressed formats\n        ...extensions.s3tc ? {\n            'bc1-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.s3tc_sRGB ? {\n            'bc1-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.rgtc ? {\n            'bc4-r-unorm': extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,\n            'bc4-r-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n            'bc5-rg-unorm': extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,\n            'bc5-rg-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,\n        } : {},\n        ...extensions.bptc ? {\n            'bc6h-rgb-float': extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n            'bc6h-rgb-ufloat': extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n            'bc7-rgba-unorm': extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n            'bc7-rgba-unorm-srgb': extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,\n        } : {},\n        ...extensions.etc ? {\n            'etc2-rgb8unorm': extensions.etc.COMPRESSED_RGB8_ETC2,\n            'etc2-rgb8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ETC2,\n            'etc2-rgb8a1unorm': extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgb8a1unorm-srgb': extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgba8unorm': extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,\n            'etc2-rgba8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n            'eac-r11unorm': extensions.etc.COMPRESSED_R11_EAC,\n            // 'eac-r11snorm'\n            'eac-rg11unorm': extensions.etc.COMPRESSED_SIGNED_RG11_EAC,\n            // 'eac-rg11snorm'\n        } : {},\n        ...extensions.astc ? {\n            'astc-4x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,\n            'astc-4x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n            'astc-5x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,\n            'astc-5x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n            'astc-5x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,\n            'astc-5x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n            'astc-6x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,\n            'astc-6x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n            'astc-6x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,\n            'astc-6x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n            'astc-8x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,\n            'astc-8x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n            'astc-8x6-unorm':   extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,\n            'astc-8x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n            'astc-8x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,\n            'astc-8x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n            'astc-10x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,\n            'astc-10x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n            'astc-10x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,\n            'astc-10x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n            'astc-10x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,\n            'astc-10x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,\n            'astc-10x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,\n            'astc-10x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n            'astc-12x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,\n            'astc-12x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n            'astc-12x12-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,\n            'astc-12x12-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,\n        } : {},\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlType(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.UNSIGNED_BYTE,\n        r8snorm: gl.BYTE,\n        r8uint: gl.UNSIGNED_BYTE,\n        r8sint: gl.BYTE,\n\n        // 16-bit formats\n        r16uint: gl.UNSIGNED_SHORT,\n        r16sint: gl.SHORT,\n        r16float: gl.HALF_FLOAT,\n        rg8unorm: gl.UNSIGNED_BYTE,\n        rg8snorm: gl.BYTE,\n        rg8uint: gl.UNSIGNED_BYTE,\n        rg8sint: gl.BYTE,\n\n        // 32-bit formats\n        r32uint: gl.UNSIGNED_INT,\n        r32sint: gl.INT,\n        r32float: gl.FLOAT,\n        rg16uint: gl.UNSIGNED_SHORT,\n        rg16sint: gl.SHORT,\n        rg16float: gl.HALF_FLOAT,\n        rgba8unorm: gl.UNSIGNED_BYTE,\n        'rgba8unorm-srgb': gl.UNSIGNED_BYTE,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.BYTE,\n        rgba8uint: gl.UNSIGNED_BYTE,\n        rgba8sint: gl.BYTE,\n        bgra8unorm: gl.UNSIGNED_BYTE,\n        'bgra8unorm-srgb': gl.UNSIGNED_BYTE,\n        rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n        rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n        rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n\n        // 64-bit formats\n        rg32uint: gl.UNSIGNED_INT,\n        rg32sint: gl.INT,\n        rg32float: gl.FLOAT,\n        rgba16uint: gl.UNSIGNED_SHORT,\n        rgba16sint: gl.SHORT,\n        rgba16float: gl.HALF_FLOAT,\n\n        // 128-bit formats\n        rgba32uint: gl.UNSIGNED_INT,\n        rgba32sint: gl.INT,\n        rgba32float: gl.FLOAT,\n\n        // Depth/stencil formats\n        stencil8: gl.UNSIGNED_BYTE,\n        depth16unorm: gl.UNSIGNED_SHORT,\n        depth24plus: gl.UNSIGNED_INT,\n        'depth24plus-stencil8': gl.UNSIGNED_INT_24_8,\n        depth32float: gl.FLOAT,\n        'depth32float-stencil8': gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n\n    };\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Texture } from '../../shared/texture/Texture';\nimport { GlTexture } from './GlTexture';\nimport { glUploadBufferImageResource } from './uploaders/glUploadBufferImageResource';\nimport { glUploadCompressedTextureResource } from './uploaders/glUploadCompressedTextureResource';\nimport { glUploadImageResource } from './uploaders/glUploadImageResource';\nimport { glUploadVideoResource } from './uploaders/glUploadVideoResource';\nimport { applyStyleParams } from './utils/applyStyleParams';\nimport { mapFormatToGlFormat } from './utils/mapFormatToGlFormat';\nimport { mapFormatToGlInternalFormat } from './utils/mapFormatToGlInternalFormat';\nimport { mapFormatToGlType } from './utils/mapFormatToGlType';\nimport { unpremultiplyAlpha } from './utils/unpremultiplyAlpha';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GLTextureUploader } from './uploaders/GLTextureUploader';\n\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * The system for managing textures in WebGL.\n * @memberof rendering\n */\nexport class GlTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    private readonly _renderer: WebGLRenderer;\n\n    private _glTextures: Record<number, GlTexture> = Object.create(null);\n    private _glSamplers: Record<string, WebGLSampler> = Object.create(null);\n\n    private _boundTextures: TextureSource[] = [];\n    private _activeTextureLocation = -1;\n\n    private _boundSamplers: Record<number, WebGLSampler> = Object.create(null);\n\n    private readonly _uploads: Record<string, GLTextureUploader> = {\n        image: glUploadImageResource,\n        buffer: glUploadBufferImageResource,\n        video: glUploadVideoResource,\n        compressed: glUploadCompressedTextureResource,\n    };\n\n    private _gl: GlRenderingContext;\n    private _mapFormatToInternalFormat: Record<string, number>;\n    private _mapFormatToType: Record<string, number>;\n    private _mapFormatToFormat: Record<string, number>;\n\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    private readonly _useSeparateSamplers = false;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_glTextures');\n        this._renderer.renderableGC.addManagedHash(this, '_glSamplers');\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        if (!this._mapFormatToInternalFormat)\n        {\n            this._mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n\n            this._mapFormatToType = mapFormatToGlType(gl);\n            this._mapFormatToFormat = mapFormatToGlFormat(gl);\n        }\n\n        this._glTextures = Object.create(null);\n        this._glSamplers = Object.create(null);\n        this._boundSamplers = Object.create(null);\n\n        for (let i = 0; i < 16; i++)\n        {\n            this.bind(Texture.EMPTY, i);\n        }\n    }\n\n    public initSource(source: TextureSource)\n    {\n        this.bind(source);\n    }\n\n    public bind(texture: BindableTexture, location = 0)\n    {\n        const source = texture.source;\n\n        if (texture)\n        {\n            this.bindSource(source, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(source.style, location);\n            }\n        }\n        else\n        {\n            this.bindSource(null, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(null, location);\n            }\n        }\n    }\n\n    public bindSource(source: TextureSource, location = 0): void\n    {\n        const gl = this._gl;\n\n        source._touched = this._renderer.textureGC.count;\n\n        if (this._boundTextures[location] !== source)\n        {\n            this._boundTextures[location] = source;\n            this._activateLocation(location);\n\n            source = source || Texture.EMPTY.source;\n\n            // bind texture and source!\n            const glTexture = this.getGlSource(source);\n\n            gl.bindTexture(glTexture.target, glTexture.texture);\n        }\n    }\n\n    private _bindSampler(style: TextureStyle, location = 0): void\n    {\n        const gl = this._gl;\n\n        if (!style)\n        {\n            this._boundSamplers[location] = null;\n            gl.bindSampler(location, null);\n\n            return;\n        }\n\n        const sampler = this._getGlSampler(style);\n\n        if (this._boundSamplers[location] !== sampler)\n        {\n            this._boundSamplers[location] = sampler;\n            gl.bindSampler(location, sampler);\n        }\n    }\n\n    public unbind(texture: BindableTexture): void\n    {\n        const source = texture.source;\n        const boundTextures = this._boundTextures;\n        const gl = this._gl;\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === source)\n            {\n                this._activateLocation(i);\n\n                const glTexture = this.getGlSource(source);\n\n                gl.bindTexture(glTexture.target, null);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    private _activateLocation(location: number): void\n    {\n        if (this._activeTextureLocation !== location)\n        {\n            this._activeTextureLocation = location;\n            this._gl.activeTexture(this._gl.TEXTURE0 + location);\n        }\n    }\n\n    private _initSource(source: TextureSource): GlTexture\n    {\n        const gl = this._gl;\n\n        const glTexture = new GlTexture(gl.createTexture());\n\n        glTexture.type = this._mapFormatToType[source.format];\n        glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n        glTexture.format = this._mapFormatToFormat[source.format];\n\n        if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo))\n        {\n            const biggestDimension = Math.max(source.width, source.height);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        this._glTextures[source.uid] = glTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceUpdate, this);\n            source.on('styleChange', this.onStyleChange, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n        this.updateStyle(source, false);\n\n        return glTexture;\n    }\n\n    protected onStyleChange(source: TextureSource): void\n    {\n        this.updateStyle(source, false);\n    }\n\n    protected updateStyle(source: TextureSource, firstCreation: boolean): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        applyStyleParams(\n            source.style,\n            gl,\n            source.mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'texParameteri',\n            gl.TEXTURE_2D,\n            // will force a clamp to edge if the texture is not a power of two\n            !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo,\n            firstCreation,\n        );\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const glTexture = this._glTextures[source.uid];\n\n        if (!glTexture) return;\n\n        this.unbind(source);\n        this._glTextures[source.uid] = null;\n\n        this._gl.deleteTexture(glTexture.texture);\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source, false);\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource, bind = true): void\n    {\n        if (bind) this.bindSource(source, 0);\n\n        const glTexture = this.getGlSource(source);\n\n        this._gl.generateMipmap(glTexture.target);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('update', this.onSourceUpdate, this);\n        source.off('resize', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('styleChange', this.onStyleChange, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    private _initSampler(style: TextureStyle): WebGLSampler\n    {\n        const gl = this._gl;\n\n        const glSampler = this._gl.createSampler();\n\n        this._glSamplers[style._resourceId] = glSampler;\n\n        applyStyleParams(\n            style,\n            gl,\n            this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'samplerParameteri',\n            glSampler,\n            false,\n            true,\n        );\n\n        return this._glSamplers[style._resourceId];\n    }\n\n    private _getGlSampler(sampler: TextureStyle): WebGLSampler\n    {\n        return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGlSource(source: TextureSource): GlTexture\n    {\n        return this._glTextures[source.uid] || this._initSource(source);\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const { pixels, width, height } = this.getPixels(texture);\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n\n        if (ctx)\n        {\n            const imageData = ctx.createImageData(width, height);\n\n            imageData.data.set(pixels);\n            ctx.putImageData(imageData, 0, 0);\n        }\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const resolution = texture.source.resolution;\n        const frame = texture.frame;\n\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        const renderer = this._renderer;\n\n        const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n        const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n\n        const gl = renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        // if (texture.source.premultiplyAlpha > 0)\n        // TODO - premultiplied alpha does not exist right now, need to add that back in!\n        // eslint-disable-next-line no-constant-condition\n        if (false)\n        {\n            unpremultiplyAlpha(pixels);\n        }\n\n        return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the array with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        (this._renderer as null) = null;\n    }\n}\n\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GlGraphicsAdaptor } from '../../../scene/graphics/gl/GlGraphicsAdaptor';\nimport { GlMeshAdaptor } from '../../../scene/mesh/gl/GlMeshAdaptor';\nimport { GlBatchAdaptor } from '../../batcher/gl/GlBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { GlBufferSystem } from './buffer/GlBufferSystem';\nimport { GlContextSystem } from './context/GlContextSystem';\nimport { GlGeometrySystem } from './geometry/GlGeometrySystem';\nimport { GlBackBufferSystem } from './GlBackBufferSystem';\nimport { GlColorMaskSystem } from './GlColorMaskSystem';\nimport { GlEncoderSystem } from './GlEncoderSystem';\nimport { GlStencilSystem } from './GlStencilSystem';\nimport { GlUboSystem } from './GlUboSystem';\nimport { GlRenderTargetSystem } from './renderTarget/GlRenderTargetSystem';\nimport { GlShaderSystem } from './shader/GlShaderSystem';\nimport { GlUniformGroupSystem } from './shader/GlUniformGroupSystem';\nimport { GlStateSystem } from './state/GlStateSystem';\nimport { GlTextureSystem } from './texture/GlTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SharedRendererOptions } from '../shared/system/SharedSystems';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\nimport type { GlRenderingContext } from './context/GlRenderingContext';\n\nconst DefaultWebGLSystems = [\n    ...SharedSystems,\n    GlUboSystem,\n    GlBackBufferSystem,\n    GlContextSystem,\n    GlBufferSystem,\n    GlTextureSystem,\n    GlRenderTargetSystem,\n    GlGeometrySystem,\n    GlUniformGroupSystem,\n    GlShaderSystem,\n    GlEncoderSystem,\n    GlStateSystem,\n    GlStencilSystem,\n    GlColorMaskSystem,\n];\nconst DefaultWebGLPipes = [...SharedRenderPipes];\nconst DefaultWebGLAdapters = [GlBatchAdaptor, GlMeshAdaptor, GlGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGLSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGLPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGLPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGLSystems, ...DefaultWebGLPipes, ...DefaultWebGLAdapters);\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\ntype WebGLSystems = ExtractSystemTypes<typeof DefaultWebGLSystems> & PixiMixins.RendererSystems & PixiMixins.WebGLSystems;\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\nexport type WebGLPipes = ExtractSystemTypes<typeof DefaultWebGLPipes> & PixiMixins.RendererPipes & PixiMixins.WebGLPipes;\n\n/**\n * Options for WebGLRenderer.\n * @memberof rendering\n */\nexport interface WebGLOptions\n    extends\n    SharedRendererOptions,\n    ExtractRendererOptions<typeof DefaultWebGLSystems>,\n    PixiMixins.WebGLOptions {}\n\n/**\n * The default WebGL renderer, uses WebGL2 contexts.\n * @memberof rendering\n */\nexport interface WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>,\n    WebGLSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGL PixiJS Renderer. This renderer allows you to use the most common graphics API, WebGL (and WebGL2).\n *\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGLRenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link rendering.autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n *\n *\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer({\n *    preference:'webgl',\n * });\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGL renderer:\n *\n * | WebGL Core Systems                          | Systems that are specific to the WebGL renderer                               |\n * | ------------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link rendering.GlUboSystem}               | This manages WebGL2 uniform buffer objects feature for shaders                |\n * | {@link rendering.GlBackBufferSystem}        | manages the back buffer, used so that we can pixi can pixels from the screen  |\n * | {@link rendering.GlContextSystem}           | This manages the WebGL context and its extensions                             |\n * | {@link rendering.GlBufferSystem}            | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link rendering.GlTextureSystem}           | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link rendering.GlRenderTargetSystem}      | This manages what we render too. For example the screen, or another texture   |\n * | {@link rendering.GlGeometrySystem}          | This manages geometry, used for drawing meshes via the GPU                    |\n * | {@link rendering.GlUniformGroupSystem}      | This manages uniform groups. Syncing shader properties with the GPU           |\n * | {@link rendering.GlShaderSystem}            | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link rendering.GlEncoderSystem}           | This manages encoders, a WebGPU Paradigm, use it to draw a mesh + shader      |\n * | {@link rendering.GlStateSystem}             | This manages the state of the WebGL context. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link rendering.GlStencilSystem}           | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link rendering.GlColorMaskSystem}         | This manages the color mask. Used for color masking                           |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof rendering\n * @property {rendering.GlUboSystem} ubo - UboSystem instance.\n * @property {rendering.GlBackBufferSystem} backBuffer - BackBufferSystem instance.\n * @property {rendering.GlContextSystem} context - ContextSystem instance.\n * @property {rendering.GlBufferSystem} buffer - BufferSystem instance.\n * @property {rendering.GlTextureSystem} texture - TextureSystem instance.\n * @property {rendering.GlRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {rendering.GlGeometrySystem} geometry - GeometrySystem instance.\n * @property {rendering.GlUniformGroupSystem} uniformGroup - UniformGroupSystem instance.\n * @property {rendering.GlShaderSystem} shader - ShaderSystem instance.\n * @property {rendering.GlEncoderSystem} encoder - EncoderSystem instance.\n * @property {rendering.GlStateSystem} state - StateSystem instance.\n * @property {rendering.GlStencilSystem} stencil - StencilSystem instance.\n * @property {rendering.GlColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @extends rendering.AbstractRenderer\n */\n/* eslint-enable max-len */\nexport class WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>\n    implements WebGLSystems\n{\n    public gl: GlRenderingContext;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgl',\n            type: RendererType.WEBGL,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n"],"names":["GlGraphicsAdaptor","init","uniforms","UniformGroup","uColor","value","Float32Array","type","uTransformMatrix","Matrix","uRound","maxTextures","getMaxTexturesPerBatch","glProgram","compileHighShaderGlProgram","name","bits","colorBitGl","generateTextureBatchBitGl","localUniformBitGl","roundPixelsBitGl","shader","Shader","resources","localUniforms","batchSamplers","getBatchSamplersUniformGroup","execute","graphicsPipe","renderable","context","customShader","this","renderer","contextSystem","graphicsContext","batcher","instructions","getContextRenderData","groups","globalUniforms","bindGroup","state","set","bind","geometry","batches","i","instructionSize","batch","size","j","textures","count","texture","draw","start","destroy","extension","ExtensionType","WebGLPipesAdaptor","GlMeshAdaptor","textureBitGl","_shader","uTexture","Texture","EMPTY","source","textureUniforms","uTextureMatrix","meshPipe","mesh","warn","uSampler","style","textureMatrix","mapCoord","localUniformsBindGroup","encoder","_geometry","GlBatchAdaptor","constructor","_didUpload","_tempState","State","for2d","batcherPipe","runners","contextChange","add","batchPipe","updateUniformGroup","uniformGroup","blendMode","BUFFER_TYPE","BUFFER_TYPE2","GlBuffer","buffer","updateID","byteLength","GlBufferSystem","_gpuBuffers","Object","create","_boundBufferBases","_renderer","renderableGC","addManagedHash","_gl","gl","getGlBuffer","uid","createGLBuffer","glBuffer","bindBuffer","bindBufferBase","index","UNIFORM_BUFFER","bindBufferRange","offset","updateBuffer","_updateID","data","bufferSubData","_updateSize","BYTES_PER_ELEMENT","drawType","descriptor","usage","BufferUsage","STATIC","STATIC_DRAW","DYNAMIC_DRAW","bufferData","destroyAll","id","deleteBuffer","onBufferDestroy","contextLost","ARRAY_BUFFER","INDEX","ELEMENT_ARRAY_BUFFER","UNIFORM","createBuffer","on","WebGLSystem","_GlContextSystem","supports","uint32Indices","uniformBufferObject","vertexArrayObject","srgbTextures","nonPowOf2wrapping","msaa","nonPowOf2mipmaps","extensions","handleContextLost","handleContextRestored","isLost","isContextLost","options","defaultOptions","multiView","canvas","DOMAdapter","get","createCanvas","width","height","view","initFromContext","alpha","background","premultipliedAlpha","antialias","backBuffer","useBackBuffer","createContext","preferWebGLVersion","stencil","preserveDrawingBuffer","powerPreference","ensureCanvasSize","targetCanvas","Math","max","webGLVersion","getWebGLRenderingContext","getExtensions","validateContext","emit","element","addEventListener","getContext","Error","common","anisotropicFiltering","getExtension","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","rgtc","loseContext","drawBuffers","depthTexture","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","vertexAttribDivisorANGLE","srgb","colorBufferFloat","provokeExt","provokingVertexWEBGL","FIRST_VERTEX_CONVENTION_WEBGL","event","preventDefault","_contextLossForced","setTimeout","restoreContext","removeEventListener","useProgram","forceContextLoss","attributes","getContextAttributes","isWebGl2","GlContextSystem","GL_FORMATS","GL_FORMATS2","GL_TARGETS","GL_TARGETS2","GL_TYPES","GL_TYPES2","infoMap","uint8x2","UNSIGNED_BYTE","uint8x4","sint8x2","BYTE","sint8x4","unorm8x2","unorm8x4","snorm8x2","snorm8x4","uint16x2","UNSIGNED_SHORT","uint16x4","sint16x2","SHORT","sint16x4","unorm16x2","unorm16x4","snorm16x2","snorm16x4","float16x2","HALF_FLOAT","float16x4","float32","FLOAT","float32x2","float32x3","float32x4","uint32","UNSIGNED_INT","uint32x2","uint32x3","uint32x4","sint32","INT","sint32x2","sint32x3","sint32x4","getGlTypeFromFormat","format","topologyToGlMap","GlGeometrySystem","_geometryVaoHash","_activeGeometry","_activeVao","hasVao","hasInstance","nativeVaoExtension","createVertexArray","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","nativeInstancedExtension","drawArraysInstanced","a","b","c","d","drawArraysInstancedANGLE","drawElementsInstanced","e","drawElementsInstancedANGLE","vertexAttribDivisor","program","getVao","updateBuffers","reset","unbind","bufferSystem","buffers","length","checkCompatibility","geometryAttributes","shaderAttributes","_attributeData","getSignature","attribs","strings","push","location","join","_key","initGeometryVao","_incRefCount","_getProgramData","signature","onGeometryDestroy","vaoObjectHash","ensureAttributes","activateVao","indexBuffer","lastBuffer","attribute","programAttrib","enableVertexAttribArray","attributeInfo","getAttributeInfoFromFormat","substring","vertexAttribIPointer","stride","vertexAttribPointer","normalised","instance","divisor","topology","instanceCount","glTopology","byteSize","glType","drawElements","getSize","drawArrays","bigTriangleGeometry","Geometry","aPosition","_GlBackBufferSystem","_useBackBufferThisRender","_antialias","_state","bigTriangleProgram","GlProgram","vertex","fragment","_bigTriangleShader","WHITE","renderStart","renderTarget","getRenderTarget","target","isRoot","renderTarget2","_targetTexture","colorTexture","_getBackBufferTexture","renderEnd","_presentBackBuffer","finishRenderPass","_backBufferTexture","targetSourceTexture","TextureSource","resolution","_resolution","resize","priority","GlBackBufferSystem","GlColorMaskSystem","_colorMaskCache","setMask","colorMask","GlEncoderSystem","commandFinished","Promise","resolve","setGeometry","skipSync","_activeProgram","GlStencilSystem","_stencilCache","enabled","stencilReference","stencilMode","STENCIL_MODES","NONE","_renderTargetStencilState","onRenderTargetChange","_comparisonFuncMapping","always","ALWAYS","never","NEVER","equal","EQUAL","NOTEQUAL","less","LESS","LEQUAL","greater","GREATER","GEQUAL","_stencilOpsMapping","keep","KEEP","zero","ZERO","replace","REPLACE","invert","INVERT","INCR","DECR","INCR_WRAP","DECR_WRAP","_activeRenderTarget","stencilState","DISABLED","setStencilMode","mode","GpuStencilModesToPixi","enable","STENCIL_TEST","stencilFunc","stencilBack","compare","stencilOp","passOp","disable","WGSL_TO_STD40_SIZE","f32","createUboElementsSTD40","uniformData","uboElements","map","chunkSize","uboElement","lineUpValue","ceil","generateArraySyncSTD40","offsetToAdd","rowSize","elementSize","remainder","createUboSyncFunctionSTD40","createUboSyncFunction","uboSyncFunctionsSTD40","GlUboSystem","UboSystem","createUboElements","generateUboSync","GlRenderTarget","msaaRenderBuffer","GlRenderTargetAdaptor","_clearColorCache","_viewPortCache","Rectangle","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","glRenderTarget","getGpuRenderTarget","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","copyTexSubImage2D","TEXTURE_2D","x","y","startRenderPass","clear","clearColor","viewport","gpuRenderTarget","viewPortY","pixelHeight","colorTextures","forEach","framebuffer","viewPortCache","depthStencilRenderBuffer","depth","_initStencil","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","initGpuRenderTarget","resource","_initColor","destroyGpuRenderTarget","deleteFramebuffer","deleteRenderbuffer","renderBuffer","_renderTarget","CLEAR","ALL","COLOR","defaultClearColor","clearColorCache","clearColorArray","resizeGpuRenderTarget","_resizeColor","_resizeStencil","createFramebuffer","pixelWidth","bindSource","glSource","getGlSource","glTexture","framebufferTexture2D","COLOR_ATTACHMENT0","viewFramebuffer","_","createRenderbuffer","source2","glInternalFormat","internalFormat","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","postrender","CanvasSource","test","contextCanvas","canvasSource","context2D","drawImage","GlRenderTargetSystem","RenderTargetSystem","super","adaptor","generateShaderSyncCode","shaderSystem","funcFragments","headerFragments","addedTextreSystem","blockIndex","textureCount","programData","group","ubo","BufferResource","uniformName","_uniformBindMap","uniform1i","functionSource","Function","GlProgramData","uniformGroups","uniformDirtyGroups","uniformBlockBindings","compileShader","src","createShader","shaderSource","booleanArray","array","Array","defaultValue","Int32Array","Uint32Array","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D","SAMPLER_CUBE","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_CUBE","SAMPLER_2D_ARRAY","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D_ARRAY","GLSL_TO_VERTEX_TYPES","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","uint","uvec2","uvec3","uvec4","bool","bvec2","bvec3","bvec4","mapType","typeNames","keys","tn","mapGlToVertexFormat","typeValue","extractAttributesFromGlProgram","sortAttributes","totalAttributes","getProgramParameter","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","startsWith","sort","bindAttribLocation","linkProgram","getAttribLocation","getUboData","ACTIVE_UNIFORM_BLOCKS","uniformBlocks","totalUniformsBlocks","getActiveUniformBlockName","uniformBlockIndex","getUniformBlockIndex","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","getUniformData","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","isArray","match","logPrettyShaderError","shaderSrc","getShaderSource","split","line","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","parseFloat","filter","n","logArgs","number","fragmentSourceToLog","console","error","groupCollapsed","groupEnd","logProgramError","vertexShader","fragmentShader","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getProgramInfoLog","generateProgram","glVertShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","webGLProgram","createProgram","attachShader","transformFeedbackVaryings","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","_uniformData","_uniformBlockData","deleteShader","getUniformLocation","defaultSyncData","GlShaderSystem","_programDataHash","_nextIndex","_boundUniformsIdsToIndexHash","_boundIndexToUniformsHash","_shaderSyncFunctions","_maxBindings","MAX_UNIFORM_BUFFER_BINDINGS","getParameter","_setProgram","syncFunction","_generateShaderSync","bindUniformBlock","isBufferResource","_bufferResource","boundIndex","nextIndex","currentBoundUniformGroup","uniformBlockBinding","_createProgramData","key","UNIFORM_TO_SINGLE_SETTERS","i32","u32","UNIFORM_TO_ARRAY_SETTERS","generateUniformsSync","uniform","uniformStructures","parsed","uniformParsers","parser","templateType","template","GlUniformGroupSystem","_cache","_uniformGroupSyncHash","syncData","isStatic","_dirtyId","syncFunc","_getUniformSyncFunction","_signature","_createUniformSyncFunction","uniformGroupSyncHash","_getSignature","_generateUniformsSync","preFix","mapWebGLBlendModesToPixi","blendMap","normal","ONE","ONE_MINUS_SRC_ALPHA","multiply","DST_COLOR","screen","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","erase","min","MIN","MAX","ext","MIN_EXT","MAX_EXT","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_GlStateSystem","stateId","polygonOffset","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","blendModesMap","diff","call","forceState","_updateCheck","_checkBlendMode","_checkPolygonOffset","POLYGON_OFFSET_FILL","depthMask","CULL_FACE","frontFace","setBlendMode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","indexOf","splice","system","GlStateSystem","GlTexture","RGBA","samplerType","glUploadBufferImageResource","upload","texSubImage2D","texImage2D","compressedFormatMap","glUploadCompressedTextureResource","UNPACK_ALIGNMENT","mipWidth","mipHeight","compressed","levelBuffer","compressedTexImage2D","glUploadImageResource","alphaMode","UNPACK_PREMULTIPLY_ALPHA_WEBGL","glWidth","glHeight","textureWidth","textureHeight","resourceWidth","resourceHeight","glUploadVideoResource","isValid","scaleModeToGlFilter","linear","nearest","mipmapScaleModeToGlFilter","wrapModeToGlAddress","repeat","compareModeToGlCompare","applyStyleParams","mipmaps","anisotropicExt","glFunctionName","firstParam","forceClamp","firstCreation","castParam","addressModeU","addressModeV","addressModeW","wrapModeS","wrapModeT","wrapModeR","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","magFilter","TEXTURE_MAG_FILTER","mipmapFilter","glFilterMode","minFilter","TEXTURE_MIN_FILTER","maxAnisotropy","level","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_COMPARE_FUNC","mapFormatToGlFormat","r8unorm","RED","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","RG","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","rgb9e5ufloat","RGB","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","STENCIL_INDEX8","depth16unorm","DEPTH_COMPONENT","depth24plus","depth32float","mapFormatToGlInternalFormat","SRGB8_ALPHA8_EXT","SRGB8_ALPHA8","RGBA8","R8","R8_SNORM","R8UI","R8I","R16UI","R16I","R16F","RG8","RG8_SNORM","RG8UI","RG8I","R32UI","R32I","R32F","RG16UI","RG16I","RG16F","RGBA8_SNORM","RGBA8UI","RGBA8I","RGB9_E5","RGB10_A2","R11F_G11F_B10F","RG32UI","RG32I","RG32F","RGBA16UI","RGBA16I","RGBA16F","RGBA32UI","RGBA32I","RGBA32F","DEPTH_COMPONENT16","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RED_RGTC1_EXT","COMPRESSED_SIGNED_RED_RGTC1_EXT","COMPRESSED_RED_GREEN_RGTC2_EXT","COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","mapFormatToGlType","UNSIGNED_INT_5_9_9_9_REV","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_24_8","FLOAT_32_UNSIGNED_INT_24_8_REV","BYTES_PER_PIXEL","GlTextureSystem","managedTextures","_glTextures","_glSamplers","_boundTextures","_activeTextureLocation","_boundSamplers","_uploads","image","video","_useSeparateSamplers","_mapFormatToInternalFormat","_mapFormatToType","_mapFormatToFormat","initSource","_bindSampler","_touched","textureGC","_activateLocation","bindTexture","bindSampler","sampler","_getGlSampler","boundTextures","activeTexture","TEXTURE0","_initSource","createTexture","autoGenerateMipmaps","isPowerOfTwo","biggestDimension","mipLevelCount","floor","log2","includes","onSourceUpdate","onStyleChange","onSourceDestroy","onSourceUnload","onUpdateMipmaps","updateStyle","deleteTexture","uploadMethodId","generateMipmap","off","_initSampler","glSampler","createSampler","_resourceId","generateCanvas","pixels","getPixels","ctx","imageData","createImageData","putImageData","frame","round","Uint8Array","glRenterTarget","readPixels","Uint8ClampedArray","slice","DefaultWebGLSystems","SharedSystems","DefaultWebGLPipes","SharedRenderPipes","DefaultWebGLAdapters","systems","renderPipes","renderPipeAdaptors","handleByNamedList","WebGLPipes","WebGLRenderer","AbstractRenderer","systemConfig","RendererType","WEBGL"],"sourceRoot":""}