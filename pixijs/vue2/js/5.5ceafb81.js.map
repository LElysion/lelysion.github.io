{"version":3,"file":"js/5.5ceafb81.js","mappings":"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","sources":["webpack://vue-project/../../../../src/rendering/high-shader/shader-bits/localUniformBit.ts","webpack://vue-project/../../../../src/rendering/high-shader/shader-bits/textureBit.ts","webpack://vue-project/../../../../src/rendering/renderers/gl/shader/program/ensureAttributes.ts","webpack://vue-project/../../../../src/rendering/renderers/gpu/state/GpuStencilModesToPixi.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/buffer/BufferResource.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/renderTarget/RenderTarget.ts","webpack://vue-project/../../../../src/rendering/renderers/gpu/renderTarget/calculateProjection.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/renderTarget/isRenderingToScreen.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/shader/UboSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/shader/utils/createUboSyncFunction.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/shader/utils/uniformParsers.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/state/State.ts","webpack://vue-project/../../../src/scene/container/CustomRenderPipe.ts","webpack://vue-project/../../../../src/scene/container/utils/executeInstructions.ts","webpack://vue-project/../../../src/scene/container/RenderGroupPipe.ts","webpack://vue-project/../../../../src/scene/container/utils/buildInstructions.ts","webpack://vue-project/../../../../src/scene/container/utils/clearList.ts","webpack://vue-project/../../../../src/scene/container/utils/collectRenderGroups.ts","webpack://vue-project/../../../../src/scene/container/utils/mixHexColors.ts","webpack://vue-project/../../../../src/scene/container/utils/mixColors.ts","webpack://vue-project/../../../../src/scene/container/utils/updateRenderGroupTransforms.ts","webpack://vue-project/../../../../src/scene/container/utils/validateRenderables.ts","webpack://vue-project/../../../src/scene/container/RenderGroupSystem.ts","webpack://vue-project/../../../src/scene/sprite/SpritePipe.ts","webpack://vue-project/../../../../src/rendering/batcher/shared/BatcherPipe.ts","webpack://vue-project/../../src/filters/Filter.ts","webpack://vue-project/../../../src/filters/mask/MaskFilter.ts","webpack://vue-project/../../../../src/rendering/mask/alpha/AlphaMaskPipe.ts","webpack://vue-project/../../../../src/rendering/mask/color/ColorMaskPipe.ts","webpack://vue-project/../../../../src/rendering/mask/stencil/StencilMaskPipe.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/background/BackgroundSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/blendModes/BlendModePipe.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/extract/ExtractSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/texture/RenderTexture.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/extract/GenerateTextureSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/SchedulerSystem.ts","webpack://vue-project/../../src/utils/sayHello.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/startup/HelloSystem.ts","webpack://vue-project/../../../src/utils/data/clean.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/texture/RenderableGCSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/texture/TextureGCSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/view/ViewSystem.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/system/SharedSystems.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/texture/TexturePool.ts","webpack://vue-project/../../../../src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts","webpack://vue-project/../../../../src/scene/graphics/gpu/colorToUniform.ts","webpack://vue-project/../../../src/scene/sprite/BatchableSprite.ts"],"sourcesContent":["export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","export const textureBit = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* wgsl */`\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */`\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */`\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\n\nexport const textureBitGl = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */`\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */`\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n","import { warn } from '../../../../../utils/logging/warn';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { Geometry } from '../../../shared/geometry/Geometry';\nimport type { ExtractedAttributeData } from './extractAttributesFromGlProgram';\n\n/**\n * This function looks at the attribute information provided to the geometry and attempts\n * to fill in an gaps. WE do this by looking at the extracted data from the shader and\n * making best guesses.\n *\n * Most of th etime users don't need to provide all the attribute info beyond the data itself, so we\n * can fill in the gaps for them. If you are using attributes in a more advanced way, you can\n * don't forget to add all the info at creation!\n * @param geometry - the geometry to ensure attributes for\n * @param extractedData - the extracted data from the shader\n */\nexport function ensureAttributes(\n    geometry: Geometry,\n    extractedData: Record<string, ExtractedAttributeData>\n): void\n{\n    for (const i in geometry.attributes)\n    {\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n\n        if (attributeData)\n        {\n            attribute.format ??= attributeData.format;\n            attribute.offset ??= attributeData.offset;\n            attribute.instance ??= attributeData.instance;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n        }\n    }\n\n    ensureStartAndStride(geometry);\n}\n\nfunction ensureStartAndStride(geometry: Geometry): void\n{\n    const { buffers, attributes } = geometry;\n\n    const tempStride: Record<string, number> = {};\n    const tempStart: Record<string, number> = {};\n\n    for (const j in buffers)\n    {\n        const buffer = buffers[j];\n\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        attribute.stride ??= tempStride[attribute.buffer.uid];\n\n        attribute.start ??= tempStart[attribute.buffer.uid];\n\n        tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n}\n","import { STENCIL_MODES } from '../../shared/state/const';\n\nexport interface StencilState\n{\n    stencilWriteMask?: number\n    stencilReadMask?: number;\n    stencilFront?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    },\n    stencilBack?: {\n        compare: 'always' | 'equal' | 'not-equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep' | 'replace';\n    }\n}\n\nexport const GpuStencilModesToPixi: StencilState[] = [];\n\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = undefined;\n\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0,\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n    stencilBack: {\n        compare: 'not-equal',\n        passOp: 'replace',\n    },\n};\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from './Buffer';\n\n/**\n * A resource that can be bound to a bind group and used in a shader.\n * Whilst a buffer can be used as a resource, this class allows you to specify an offset and size of the buffer to use.\n * This is useful if you have a large buffer and only part of it is used in a shader.\n *\n * This resource, will listen for changes on the underlying buffer and emit a itself if the buffer changes shape.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array(1000),\n *    usage: BufferUsage.UNIFORM,\n * });\n * // Create a buffer resource that uses the first 100 bytes of a buffer\n * const bufferResource = new BufferResource({\n *    buffer,\n *    offset: 0,\n *    size: 100,\n * });\n * @memberof rendering\n */\nexport class BufferResource extends EventEmitter<{\n    change: BindResource,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'bufferResource';\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /** the underlying buffer that this resource is using */\n    public buffer: Buffer;\n    /** the offset of the buffer this resource is using. If not provided, then it will use the offset of the buffer. */\n    public readonly offset: number;\n    /** the size of the buffer this resource is using. If not provided, then it will use the size of the buffer. */\n    public readonly size: number;\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    public readonly _bufferResource = true;\n\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    public destroyed = false;\n\n    /**\n     * Create a new Buffer Resource.\n     * @param options - The options for the buffer resource\n     * @param options.buffer - The underlying buffer that this resource is using\n     * @param options.offset - The offset of the buffer this resource is using.\n     * If not provided, then it will use the offset of the buffer.\n     * @param options.size - The size of the buffer this resource is using.\n     * If not provided, then it will use the size of the buffer.\n     */\n    constructor({ buffer, offset, size }: { buffer: Buffer; offset?: number; size?: number; })\n    {\n        super();\n\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n\n        this.buffer.on('change', this.onBufferChange, this);\n    }\n\n    protected onBufferChange(): void\n    {\n        this._resourceId = uid('resource');\n\n        this.emit('change', this);\n    }\n\n    /**\n     * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n     * if you want to destroy it as well, or code will explode\n     * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n     */\n    public destroy(destroyBuffer = false): void\n    {\n        this.destroyed = true;\n\n        if (destroyBuffer)\n        {\n            this.buffer.destroy();\n        }\n\n        this.emit('change', this);\n\n        this.buffer = null;\n    }\n}\n","// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { uid } from '../../../../utils/data/uid';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * Options for creating a render target.\n * @memberof rendering\n */\nexport interface RenderTargetOptions\n{\n    /** the width of the RenderTarget */\n    width?: number;\n    /** the height of the RenderTarget */\n    height?: number;\n    /** the resolution of the RenderTarget */\n    resolution?: number;\n    /** an array of textures, or a number indicating how many color textures there should be */\n    colorTextures?: BindableTexture[] | number;\n    /** should this render target have a stencil buffer? */\n    stencil?: boolean;\n    /** should this render target have a depth buffer? */\n    depth?: boolean;\n    /** a depth stencil texture that the depth and stencil outputs will be written to */\n    depthStencilTexture?: BindableTexture | boolean;\n    /** should this render target be antialiased? */\n    antialias?: boolean;\n    /** is this a root element, true if this is gl context owners render target */\n    isRoot?: boolean;\n}\n\n/**\n * A class that describes what the renderers are rendering to.\n * This can be as simple as a Texture, or as complex as a multi-texture, multi-sampled render target.\n * Support for stencil and depth buffers is also included.\n *\n * If you need something more complex than a Texture to render to, you should use this class.\n * Under the hood, all textures you render to have a RenderTarget created on their behalf.\n * @memberof rendering\n */\nexport class RenderTarget\n{\n    /** The default options for a render target */\n    public static defaultOptions: RenderTargetOptions = {\n        /** the width of the RenderTarget */\n        width: 0,\n        /** the height of the RenderTarget */\n        height: 0,\n        /** the resolution of the RenderTarget */\n        resolution: 1,\n        /** an array of textures, or a number indicating how many color textures there should be */\n        colorTextures: 1,\n        /** should this render target have a stencil buffer? */\n        stencil: false,\n        /** should this render target have a depth buffer? */\n        depth: false,\n        /** should this render target be antialiased? */\n        antialias: false, // save on perf by default!\n        /** is this a root element, true if this is gl context owners render target */\n        isRoot: false\n    };\n\n    /** unique id for this render target */\n    public readonly uid: number = uid('renderTarget');\n\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    public colorTextures: TextureSource[] = [];\n    /** the stencil and depth buffer will right to this texture in WebGPU */\n    public depthStencilTexture: TextureSource;\n    /** if true, will ensure a stencil buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public stencil: boolean;\n    /** if true, will ensure a depth buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public depth: boolean;\n\n    public dirtyId = 0;\n    public isRoot = false;\n\n    private readonly _size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    private readonly _managedColorTextures: boolean = false;\n\n    /**\n     * @param [descriptor] - Options for creating a render target.\n     */\n    constructor(descriptor: RenderTargetOptions = {})\n    {\n        descriptor = { ...RenderTarget.defaultOptions, ...descriptor };\n\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            this._managedColorTextures = true;\n\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new TextureSource({\n                    width: descriptor.width,\n                    height: descriptor.height,\n                    resolution: descriptor.resolution,\n                    antialias: descriptor.antialias,\n                })\n                );\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthStencilTexture || this.stencil)\n        {\n            // TODO add a test\n            if (descriptor.depthStencilTexture instanceof Texture\n                || descriptor.depthStencilTexture instanceof TextureSource)\n            {\n                this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            }\n            else\n            {\n                this.ensureDepthStencilTexture();\n            }\n        }\n    }\n\n    get size(): [number, number]\n    {\n        const _size = this._size;\n\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n\n        return _size as any as [number, number];\n    }\n\n    get width(): number\n    {\n        return this.colorTexture.source.width;\n    }\n\n    get height(): number\n    {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth(): number\n    {\n        return this.colorTexture.source.pixelWidth;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.colorTexture.source.pixelHeight;\n    }\n\n    get resolution(): number\n    {\n        return this.colorTexture.source._resolution;\n    }\n\n    get colorTexture(): TextureSource\n    {\n        return this.colorTextures[0];\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    /**\n     * This will ensure a depthStencil texture is created for this render target.\n     * Most likely called by the mask system to make sure we have stencil buffer added.\n     * @internal\n     * @ignore\n     */\n    public ensureDepthStencilTexture()\n    {\n        if (!this.depthStencilTexture)\n        {\n            this.depthStencilTexture = new TextureSource({\n                width: this.width,\n                height: this.height,\n                resolution: this.resolution,\n                format: 'depth24plus-stencil8',\n                autoGenerateMipmaps: false,\n                antialias: false,\n                mipLevelCount: 1,\n                // sampleCount: handled by the render target system..\n            });\n        }\n    }\n\n    public resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    public destroy()\n    {\n        this.colorTexture.source.off('resize', this.onSourceResize, this);\n\n        if (this._managedColorTextures)\n        {\n            this.colorTextures.forEach((texture) =>\n            {\n                texture.destroy();\n            });\n        }\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n}\n","import type { Matrix } from '../../../../maths/matrix/Matrix';\n\nexport function calculateProjection(\n    pm: Matrix,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    flipY: boolean\n): Matrix\n{\n    const sign = flipY ? 1 : -1;\n\n    pm.identity();\n\n    pm.a = (1 / width * 2);\n    pm.d = sign * (1 / height * 2);\n\n    pm.tx = -1 - (x * pm.a);\n    pm.ty = -sign - (y * pm.d);\n\n    return pm;\n}\n","import type { RenderTarget } from './RenderTarget';\n\n/**\n * Checks if the render target is viewable on the screen\n * Basically, is it a canvas element and is that canvas element in the DOM\n * @param renderTarget - the render target to check\n * @returns true if the render target is viewable on the screen\n */\nexport function isRenderingToScreen(renderTarget: RenderTarget): boolean\n{\n    const resource = renderTarget.colorTexture.source.resource;\n\n    return ((globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement) && document.body.contains(resource));\n}\n","import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /** called after the render pass is finished */\n    postrender?(renderTarget: RenderTarget,): void;\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n\n    /** destroys the gpu render target */\n    destroyGpuRenderTarget(\n        /** the render target to destroy */\n        gpuRenderTarget: RENDER_TARGET\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        renderer.renderableGC.addManagedHash(this, '_gpuRenderTargetHash');\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    }\n\n    public postrender()\n    {\n        this.adaptor.postrender?.(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas).source;\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.once('destroy', () =>\n            {\n                renderTarget.destroy();\n\n                this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n\n                if (gpuRenderTarget)\n                {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n}\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { Buffer } from '../buffer/Buffer';\nimport { BufferUsage } from '../buffer/const';\n\nimport type { System } from '../system/System';\nimport type { UboElement, UboLayout, UniformData, UniformsSyncCallback } from './types';\nimport type { UniformGroup } from './UniformGroup';\n\nexport interface UboAdaptor\n{\n    createUboElements: (uniformData: UniformData[]) => UboLayout;\n    generateUboSync: (uboElements: UboElement[]) => UniformsSyncCallback;\n}\n\n/**\n * System plugin to the renderer to manage uniform buffers.\n * @memberof rendering\n */\nexport class UboSystem implements System\n{\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    private _syncFunctionHash: Record<string, {\n        layout: UboLayout,\n        syncFunction: (uniforms: Record<string, any>, data: Float32Array, offset: number) => void\n    }> = Object.create(null);\n\n    private readonly _adaptor: UboAdaptor;\n\n    constructor(adaptor: UboAdaptor)\n    {\n        this._adaptor = adaptor;\n\n        // Validation check that this environment support `new Function`\n        this._systemCheck();\n    }\n\n    /**\n     * Overridable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private _systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                 + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n\n    public ensureUniformGroup(uniformGroup: UniformGroup): void\n    {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n    }\n\n    public getUniformGroupData(uniformGroup: UniformGroup)\n    {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n\n    private _initUniformGroup(uniformGroup: UniformGroup)\n    {\n        const uniformGroupSignature = uniformGroup._signature;\n\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n\n        if (!uniformData)\n        {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n\n            const layout = this._adaptor.createUboElements(elements);\n\n            const syncFunction = this._generateUboSync(layout.uboElements);\n\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout,\n                syncFunction\n            };\n        }\n\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n\n    private _generateUboSync(\n        uboElements: UboElement[],\n    ): UniformsSyncCallback\n    {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n\n    public syncUniformGroup(uniformGroup: UniformGroup, data?: Float32Array, offset?: number): boolean\n    {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n\n        data ||= (uniformGroup.buffer.data as Float32Array);\n        offset ||= 0;\n\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n\n        return true;\n    }\n\n    public updateUniformGroup(uniformGroup: UniformGroup): boolean\n    {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n\n        const synced = this.syncUniformGroup(uniformGroup);\n\n        uniformGroup.buffer.update();\n\n        return synced;\n    }\n\n    public destroy(): void\n    {\n        this._syncFunctionHash = null;\n    }\n}\n","/* eslint-disable quote-props */\nimport { uniformParsers } from './uniformParsers';\n\nimport type { UboElement, UNIFORM_TYPES_SINGLE, UniformsSyncCallback } from '../types';\n\nexport function createUboSyncFunction(\n    uboElements: UboElement[],\n    parserCode: 'uboWgsl' | 'uboStd40',\n    arrayGenerationFunction: (uboElement: UboElement, offsetToAdd: number) => string,\n    singleSettersMap: Record<UNIFORM_TYPES_SINGLE, string>,\n): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n\n    let prev = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n        let offset = 0;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.test(uboElement.data))\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(\n                    `name = \"${name}\";`,\n                    `offset += ${offset - prev};`,\n                    uniformParsers[j][parserCode] || uniformParsers[j].ubo);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            }\n            else\n            {\n                const template = singleSettersMap[uboElement.data.type as UNIFORM_TYPES_SINGLE];\n\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(/* wgsl */`\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n\n        prev = offset;\n    }\n\n    const fragmentSrc = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function(\n        'uv',\n        'data',\n        'offset',\n        fragmentSrc,\n    ) as UniformsSyncCallback;\n}\n","import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        data[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n// import { Texture } from '../../texture/Texture';\n\nimport type { Color } from '../../../../../color/Color';\nimport type { Matrix } from '../../../../../maths/matrix/Matrix';\nimport type { PointLike } from '../../../../../maths/point/PointLike';\nimport type { Rectangle } from '../../../../../maths/shapes/Rectangle';\nimport type { UNIFORM_TYPES, UniformData } from '../types';\n\nexport interface UniformParserDefinition\n{\n    type: UNIFORM_TYPES;\n    test(data: UniformData): boolean;\n    ubo?: string;\n    uboWgsl?: string;\n    uboStd40?: string;\n    uniform?: string;\n}\n\nexport const uniformParsers: UniformParserDefinition[] = [\n    // uploading pixi matrix object to mat3\n    {\n        type: 'mat3x3<f32>',\n        test: (data: UniformData): boolean =>\n        {\n            const value = data.value as Matrix;\n\n            return value.a !== undefined;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Rectangle).width !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: 'vec2<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec2<f32>' && data.size === 1 && (data.value as PointLike).x !== undefined,\n        ubo:  `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: 'vec3<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec3<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    },\n];\n","/* eslint-disable max-len */\nimport type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderContainer } from './RenderContainer';\n\n/**\n * The CustomRenderPipe is a render pipe that allows for custom rendering logic for your renderable objects.\n * @example\n * import { RenderContainer } from 'pixi.js';\n *\n * const renderContainer = new RenderContainer(\n * (renderer) =>  {\n *     renderer.clear({\n *       clearColor: 'green', // clear the screen to green when rendering this item\n *     });\n * })\n * @memberof rendering\n */\nexport class CustomRenderPipe implements InstructionPipe<RenderContainer>, RenderPipe<RenderContainer>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'customRender',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public updateRenderable() { /** empty */ }\n    public destroyRenderable() { /** empty */ }\n    public validateRenderable() { return false; }\n\n    public addRenderable(container: RenderContainer, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(container);\n    }\n\n    public execute(container: RenderContainer)\n    {\n        if (!container.isRenderable) return;\n\n        container.render(this._renderer);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function executeInstructions(renderGroup: RenderGroup, renderer: RenderPipes)\n{\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n\n    for (let i = 0; i < instructionSet.instructionSize; i++)\n    {\n        const instruction = instructions[i];\n\n        (renderer[instruction.renderPipeId as keyof RenderPipes] as InstructionPipe<any>).execute(instruction);\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { executeInstructions } from './utils/executeInstructions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderGroup } from './RenderGroup';\n\nexport class RenderGroupPipe implements InstructionPipe<RenderGroup>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderGroup(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(renderGroup);\n    }\n\n    public execute(renderGroup: RenderGroup)\n    {\n        if (!renderGroup.isRenderable) return;\n\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.worldTransform,\n            worldColor: renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(renderGroup, this._renderer.renderPipes);\n\n        this._renderer.globalUniforms.pop();\n\n        // now render a quad..\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Renderer, RenderPipes } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\nimport type { RenderGroup } from '../RenderGroup';\n\n/**\n * @param renderGroup\n * @param renderPipes\n * @deprecated since 8.3.0\n */\nexport function buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes): void;\nexport function buildInstructions(renderGroup: RenderGroup, renderer: Renderer): void;\nexport function buildInstructions(renderGroup: RenderGroup, rendererOrPipes: RenderPipes | Renderer): void\n{\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n\n    instructionSet.reset();\n\n    // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n    const renderer = (rendererOrPipes as Renderer).renderPipes\n        ? (rendererOrPipes as Renderer)\n        : (rendererOrPipes as RenderPipes).batch.renderer;\n    const renderPipes = renderer.renderPipes;\n\n    // TODO add some events / runners for build start\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n\n    if (root.sortableChildren)\n    {\n        root.sortChildren();\n    }\n\n    collectAllRenderablesAdvanced(root, instructionSet, renderer, true);\n\n    // TODO add some events / runners for build end\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n}\n\n/**\n * @param container\n * @param instructionSet\n * @param renderer\n * @deprecated since 8.3.0\n */\nexport function collectAllRenderables(container: Container, instructionSet: InstructionSet, renderer: RenderPipes): void;\nexport function collectAllRenderables(container: Container, instructionSet: InstructionSet, renderer: Renderer): void;\nexport function collectAllRenderables(\n    container: Container, instructionSet: InstructionSet, rendererOrPipes: Renderer | RenderPipes\n): void\n{\n    // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n    const renderer = (rendererOrPipes as Renderer).renderPipes\n        ? (rendererOrPipes as Renderer)\n        : (rendererOrPipes as RenderPipes).batch.renderer;\n\n    // if there is 0b01 or 0b10 the return value\n    if (container.globalDisplayStatus < 0b111 || !container.includeInBuild) return;\n\n    if (container.sortableChildren)\n    {\n        container.sortChildren();\n    }\n\n    if (container.isSimple)\n    {\n        collectAllRenderablesSimple(container, instructionSet, renderer);\n    }\n    else\n    {\n        collectAllRenderablesAdvanced(container, instructionSet, renderer, false);\n    }\n}\n\nfunction collectAllRenderablesSimple(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderer: Renderer,\n): void\n{\n    if (container.renderPipeId)\n    {\n        const renderable = container as Renderable;\n        const { renderPipes, renderableGC } = renderer;\n\n        // TODO add blends in\n        renderPipes.blendMode.setBlendMode(renderable, container.groupBlendMode, instructionSet);\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[renderable.renderPipeId].addRenderable(renderable, instructionSet);\n\n        renderableGC.addRenderable(renderable, instructionSet);\n\n        renderable.didViewUpdate = false;\n    }\n\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            collectAllRenderables(children[i], instructionSet, renderer);\n        }\n    }\n}\n\nfunction collectAllRenderablesAdvanced(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderer: Renderer,\n    isRoot: boolean\n): void\n{\n    const { renderPipes, renderableGC } = renderer;\n\n    if (!isRoot && container.renderGroup)\n    {\n        renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    }\n    else\n    {\n        for (let i = 0; i < container.effects.length; i++)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.push(effect, container, instructionSet);\n        }\n\n        const renderable = container as Renderable;\n        const renderPipeId = renderable.renderPipeId;\n\n        if (renderPipeId)\n        {\n            // TODO add blends in\n            renderPipes.blendMode.setBlendMode(renderable, renderable.groupBlendMode, instructionSet);\n\n            const pipe = renderPipes[renderPipeId as keyof RenderPipes]as RenderPipe<any>;\n\n            pipe.addRenderable(renderable, instructionSet);\n\n            renderableGC.addRenderable(renderable, instructionSet);\n\n            renderable.didViewUpdate = false;\n        }\n\n        const children = container.children;\n\n        if (children.length)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                collectAllRenderables(children[i], instructionSet, renderer);\n            }\n        }\n\n        // loop backwards through effects\n        for (let i = container.effects.length - 1; i >= 0; i--)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n","/**\n * nulls all slots in an array from a certain index.\n * assume that when a null item is hit, the rest are also null.\n * Which will be the case for where this is used!\n * @param list - the array to clean\n * @param index - the index to start from\n */\nexport function clearList(list: Array<unknown>, index?: number)\n{\n    index ||= 0;\n\n    for (let j = index; j < list.length; j++)\n    {\n        if (list[j])\n        {\n            list[j] = null;\n        }\n        else\n        {\n            break;\n        }\n    }\n}\n","import type { RenderGroup } from '../RenderGroup';\n\nexport function collectRenderGroups(renderGroup: RenderGroup, out: RenderGroup[] = [])\n{\n    out.push(renderGroup);\n\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n    {\n        collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n    }\n\n    return out;\n}\n","export function mixHexColors(color1: number, color2: number, ratio: number): number\n{\n    const r1 = (color1 >> 16) & 0xFF;\n    const g1 = (color1 >> 8) & 0xFF;\n    const b1 = color1 & 0xFF;\n\n    const r2 = (color2 >> 16) & 0xFF;\n    const g2 = (color2 >> 8) & 0xFF;\n    const b2 = color2 & 0xFF;\n\n    const r = r1 + ((r2 - r1) * ratio);\n    const g = g1 + ((g2 - g1) * ratio);\n    const b = b1 + ((b2 - b1) * ratio);\n\n    return (r << 16) + (g << 8) + b;\n}\n\n","import { mixHexColors } from './mixHexColors';\n\nconst WHITE_BGR = 0xFFFFFF;\n\nexport function mixColors(localBGRColor: number, parentBGRColor: number)\n{\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        return localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n\n    return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\n\nexport function mixStandardAnd32BitColors(localColorRGB: number, localAlpha: number, parentColor: number)\n{\n    const parentAlpha = ((parentColor >> 24) & 0xFF) / 255;\n\n    const globalAlpha = ((localAlpha * parentAlpha) * 255);\n\n    // flip rgb to bgr\n    const localBGRColor = ((localColorRGB & 0xFF) << 16) + (localColorRGB & 0xFF00) + ((localColorRGB >> 16) & 0xFF);\n\n    const parentBGRColor = parentColor & 0x00FFFFFF;\n\n    let sharedBGRColor: number;\n\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n    else\n    {\n        sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n    }\n\n    return sharedBGRColor + (globalAlpha << 24);\n}\n","import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { clearList } from './clearList';\nimport { mixColors } from './mixColors';\n\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const renderGroupDepth = Number(j);\n\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            const child = list[i];\n\n            // check that these things match our layer and depth - if the renderGroup does not match,\n            // the child has been re-parented into another rendergroup since it asked to be updated so we can ignore it here\n            // secondly if the relativeRenderGroupDepth has changed, then the it means it will have been nested at a\n            // different different level in the render group - so we can wait for the update that does in fact match\n            if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth)\n            {\n                updateTransformAndChildren(child, updateTick, 0);\n            }\n        }\n\n        clearList(list, index);\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = mixColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.renderGroup))\n    {\n        updateFlags = updateFlags | container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.parentRenderGroup;\n        const renderable = container as ViewContainer;\n\n        if (renderable.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(renderable);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = mixColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n","import type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function validateRenderables(renderGroup: RenderGroup, renderPipes: RenderPipes): boolean\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    let rebuildRequired = false;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        // note to self: there is no need to check if container.parentRenderGroup || !container.renderGroup\n        // exist here, as this function is only called if the structure did NOT change\n        // which means they have to be valid if this function is called\n\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId as keyof RenderPipes] as RenderPipe<any>;\n\n        rebuildRequired = pipe.validateRenderable(container);\n\n        if (rebuildRequired)\n        {\n            break;\n        }\n    }\n\n    renderGroup.structureDidChange = rebuildRequired;\n\n    return rebuildRequired;\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { buildInstructions } from './utils/buildInstructions';\nimport { clearList } from './utils/clearList';\nimport { collectRenderGroups } from './utils/collectRenderGroups';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { ViewContainer } from '../view/ViewContainer';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        container.isRenderGroup = true;\n\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        const renderGroups = collectRenderGroups(container.renderGroup, []);\n\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        for (let i = 0; i < renderGroups.length; i++)\n        {\n            const renderGroup = renderGroups[i];\n\n            renderGroup.runOnRender();\n\n            renderGroup.instructionSet.renderPipes = renderPipes;\n\n            if (!renderGroup.structureDidChange)\n            {\n                // phase 1 - validate all the renderables\n                validateRenderables(renderGroup, renderPipes);\n            }\n            else\n            {\n                clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n            }\n\n            // phase 2 - update all the transforms\n            // including updating the renderables..\n            updateRenderGroupTransforms(renderGroup);\n\n            if (renderGroup.structureDidChange)\n            {\n                renderGroup.structureDidChange = false;\n\n                // build the renderables\n                buildInstructions(renderGroup, renderer);\n            }\n            else\n            {\n                // update remaining renderables\n                updateRenderables(renderGroup);\n            }\n\n            // reset the renderables to update\n            renderGroup.childrenRenderablesToUpdate.index = 0;\n\n            // upload all the things!\n            renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n        }\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n\nfunction updateRenderables(renderGroup: RenderGroup)\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        if (container.didViewUpdate)\n        {\n            renderGroup.updateRenderable(container as ViewContainer);\n        }\n    }\n\n    clearList(list, index);\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: Sprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.transform = sprite.groupTransform;\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { DefaultBatcher } from './DefaultBatcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableElement, Batcher } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    init?(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    contextChange?(): void;\n}\n\n/**\n * A pipe that batches elements into batches and sends them to the renderer.\n *\n * You can install new Batchers using ExtensionType.Batcher. Each render group will\n * have a default batcher and any required ones will be created on demand.\n * @memberof rendering\n */\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private readonly _batchersByInstructionSet: Record<number, Record<string, Batcher>> = Object.create(null);\n\n    private _adaptor: BatcherAdaptor;\n\n    /** A record of all active batchers, keyed by their names */\n    private _activeBatches: Record<string, Batcher> = Object.create(null);\n\n    /** The currently active batcher being used to batch elements */\n    private _activeBatch: Batcher;\n\n    public static _availableBatchers: Record<string, new () => Batcher> = Object.create(null);\n\n    public static getBatcher(name: string): Batcher\n    {\n        return new this._availableBatchers[name as keyof typeof this._availableBatchers]();\n    }\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init?.(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        let batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        if (!batchers)\n        {\n            batchers = this._batchersByInstructionSet[instructionSet.uid] = Object.create(null);\n            batchers.default ||= new DefaultBatcher();\n        }\n\n        this._activeBatches = batchers;\n\n        this._activeBatch = this._activeBatches.default;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].begin();\n        }\n    }\n\n    public addToBatch(batchableObject: BatchableElement, instructionSet: InstructionSet)\n    {\n        if (this._activeBatch.name !== batchableObject.batcherName)\n        {\n            this._activeBatch.break(instructionSet);\n\n            let batch = this._activeBatches[batchableObject.batcherName];\n\n            if (!batch)\n            {\n                batch = this._activeBatches[batchableObject.batcherName]\n                    = BatcherPipe.getBatcher(batchableObject.batcherName);\n                batch.begin();\n            }\n\n            this._activeBatch = batch;\n        }\n\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n\n        const batches = this._activeBatches;\n\n        for (const i in batches)\n        {\n            const batch = batches[i as keyof typeof batches];\n            const geometry = batch.geometry;\n\n            geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n\n            geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n        }\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batchers = this._batchersByInstructionSet[instructionSet.uid];\n\n        for (const i in batchers)\n        {\n            const batcher = batchers[i as keyof typeof batchers];\n            const geometry = batcher.geometry;\n\n            if (batcher.dirty)\n            {\n                batcher.dirty = false;\n\n                geometry.buffers[0].update(batcher.attributeSize * 4);\n            }\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = batcher.geometry;\n            const shader = batcher.shader;\n\n            this._adaptor.start(this, geometry, shader);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor = null;\n\n        for (const i in this._activeBatches)\n        {\n            this._activeBatches[i].destroy();\n        }\n\n        this._activeBatches = null;\n    }\n}\n\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\n\nextensions.add(DefaultBatcher);\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader';\nimport { State } from '../rendering/renderers/shared/state/State';\n\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type {\n    IShaderWithResources,\n    ShaderFromResources,\n    ShaderWithResources\n} from '../rendering/renderers/shared/shader/Shader';\nimport type { BLEND_MODES } from '../rendering/renderers/shared/state/const';\nimport type { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * Filters provide additional shading and post-processing effects to any display object and its children\n * they are attached to.\n *\n * You attached filters to a display object using its `filters` array property.\n *\n * ```js\n * import { Sprite, BlurFilter, HardMixBlend } from 'pixi.js';\n *\n * const sprite = Sprite.from('myTexture.png');\n *\n * // single filter\n * sprite.filters = new BlurFilter({ strength: 8 });\n *\n * // or multiple filters\n * sprite.filters = [new BlurFilter({ strength: 8 }), new HardMixBlend()];\n * ```\n *\n * Pixi has a number of built-in filters which can be used in your game or application:\n *\n * - {@link filters.AlphaFilter} - Applies alpha to the display object and any of its children.\n * - {@link filters.BlurFilter} - Applies a Gaussian blur to the display object.\n * - {@link filters.BlurFilterPass} - Applies a blur pass to an object.\n * - {@link filters.ColorBurnBlend} - Blend mode to add color burn to display objects.\n * - {@link filters.ColorDodgeBlend} - Blend mode to add color dodge to display objects.\n * - {@link filters.ColorMatrixFilter} - Transform the color channels by matrix multiplication.\n * - {@link filters.DarkenBlend} - Blend mode to darken display objects.\n * - {@link filters.DisplacementFilter} - Applies a displacement map to distort an object.\n * - {@link filters.DivideBlend} - Blend mode to divide display objects.\n * - {@link filters.HardMixBlend} - Blend mode to hard mix display objects.\n * - {@link filters.LinearBurnBlend} - Blend mode to add linear burn to display objects.\n * - {@link filters.LinearDodgeBlend} - Blend mode to add linear dodge to display objects.\n * - {@link filters.LinearLightBlend} - Blend mode to add linear light to display objects.\n * - {@link filters.NoiseFilter} - Applies random noise to an object.\n * - {@link filters.PinLightBlend} - Blend mode to add pin light to display objects.\n * - {@link filters.SubtractBlend} - Blend mode to subtract display objects.\n *\n * <br/>\n * For more available filters, check out the\n *  {@link https://pixijs.io/filters/docs/ pixi-filters} repository.\n *\n * You can also check out the awesome {@link https://pixijs.io/filters/examples/ Filter demo} to see\n * filters in action and combine them!\n * @namespace filters\n */\n\n/**\n * The options to use when creating a new filter.\n * @memberof filters\n */\nexport interface FilterOptions\n{\n    /** optional blend mode used by the filter when rendering (defaults to 'normal') */\n    blendMode?: BLEND_MODES;\n    /**\n     * the resolution the filter should be rendered at. The lower the resolution, the more performant\n     * the filter will be, but the lower the quality of the output. (default 1)\n     * If 'inherit', the resolution of the render target is used.\n     * Consider lowering this for things like blurs filters\n     */\n    resolution?: number | 'inherit';\n    /**\n     * the amount of pixels to pad the container with when applying the filter. For example a blur extends the\n     * container out as it blurs, so padding is applied to ensure that extra detail is rendered as well\n     * without clipping occurring. (default 0)\n     */\n    padding?: number;\n    /**\n     * If true the filter will make use of antialiasing. Although it looks better this can have a performance impact.\n     * If set to 'inherit', the filter will detect the antialiasing of the render target and change this automatically.\n     * Definitely don't set this to true if the render target has antialiasing set to false. As it will antialias,\n     * but you won't see the difference. (default 'off')\n     *\n     * This can be a boolean or [FilterAntialias]{@link filters.FilterAntialias} string.\n     */\n    antialias?: FilterAntialias | boolean;\n    /**\n     * If this is set to true, the filter system will grab a snap shot of the area being rendered\n     * to and pass this into the shader. This is useful for blend modes that need to be aware of the pixels\n     * they are rendering to. Only use if you need that data, otherwise its an extra gpu copy you don't need!\n     * (default false)\n     */\n    blendRequired?: boolean;\n    /**\n     * If this is set to true, the filter system will clip filter texture into viewport\n     * This is useful for filters that applied to whole texture.\n     * (default true)\n     */\n    clipToViewport?: boolean;\n}\n\n/** Filter options mixed with shader resources. A filter needs a shader and some resources to work. */\nexport type FilterWithShader = FilterOptions & IShaderWithResources;\n\n/**\n * The antialiasing mode of the filter. This can be either:\n * - `on` - the filter is always antialiased regardless of the render target settings\n * - `off` - (default) the filter is never antialiased regardless of the render target settings\n * - `inherit` - the filter uses the antialias settings of the render target\n * @memberof filters\n */\nexport type FilterAntialias = 'on' | 'off' | 'inherit';\n\n/**\n * The Filter class is the base for all filter effects used in Pixi.js\n * As it extends a shader, it requires that a glProgram is parsed in to work with WebGL and a gpuProgram for WebGPU.\n * If you don't proved one, then the filter is skipped and just rendered as if it wasn't there for that renderer.\n *\n * A filter can be applied to anything that extends Container in Pixi.js which also includes Sprites, Graphics etc.\n *\n * Its worth noting Performance-wise filters can be pretty expensive if used too much in a single scene.\n * The following happens under the hood when a filter is applied:\n *\n * .1. Break the current batch\n * <br>\n * .2. The target is measured using getGlobalBounds\n * (recursively go through all children and figure out how big the object is)\n * <br>\n * .3. Get the closest Po2 Textures from the texture pool\n * <br>\n * .4. Render the target to that texture\n * <br>\n * .5. Render that texture back to the main frame buffer as a quad using the filters program.\n * <br>\n * <br>\n * Some filters (such as blur) require multiple passes too which can result in an even bigger performance hit. So be careful!\n * Its not generally the complexity of the shader that is the bottle neck,\n * but all the framebuffer / shader switching that has to take place.\n * One filter applied to a container with many objects is MUCH faster than many filter applied to many objects.\n * @class\n * @memberof filters\n */\nexport class Filter extends Shader\n{\n    /**\n     * The default filter settings\n     * @static\n     */\n    public static readonly defaultOptions: FilterOptions = {\n        blendMode: 'normal',\n        resolution: 1,\n        padding: 0,\n        antialias: 'off',\n        blendRequired: false,\n        clipToViewport: true,\n    };\n\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     * @default 0\n     */\n    public padding: number;\n\n    /**\n     * should the filter use antialiasing?\n     * @default inherit\n     */\n    public antialias: FilterAntialias;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled = true;\n\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    public _state = State.for2d();\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     * @default 1\n     */\n    public resolution: number | 'inherit';\n\n    /**\n     * Whether or not this filter requires the previous render texture for blending.\n     * @default false\n     */\n    public blendRequired: boolean;\n\n    /**\n     * Clip texture into viewport or not\n     * @default true\n     */\n    public clipToViewport: boolean;\n\n    /**\n     * @param options - The optional parameters of this filter.\n     */\n    constructor(options: FilterWithShader)\n    {\n        options = { ...Filter.defaultOptions, ...options };\n\n        super(options as ShaderWithResources);\n\n        this.blendMode = options.blendMode;\n        this.padding = options.padding;\n\n        // check if is boolean\n        if (typeof options.antialias === 'boolean')\n        {\n            this.antialias = options.antialias ? 'on' : 'off';\n        }\n        else\n        {\n            this.antialias = options.antialias;\n        }\n\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n        this.clipToViewport = options.clipToViewport;\n\n        this.addResource('uTexture', 0, 1);\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Get the blend mode of the filter.\n     * @default \"normal\"\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._state.blendMode;\n    }\n\n    /** Sets the blend mode of the filter. */\n    set blendMode(value: BLEND_MODES)\n    {\n        this._state.blendMode = value;\n    }\n\n    /**\n     * A short hand function to create a filter based of a vertex and fragment shader src.\n     * @param options\n     * @returns A shiny new PixiJS filter!\n     */\n    public static from(options: FilterOptions & ShaderFromResources): Filter\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Filter({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n","import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    inverse?: boolean;\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n            uInverse: { value: options.inverse ? 1 : 0, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    set inverse(value: boolean)\n    {\n        this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n    }\n\n    get inverse(): boolean\n    {\n        return this.resources.filterUniforms.uniforms.uInverse === 1;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter';\nimport { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../renderers/types';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { RenderTarget } from '../../renderers/shared/renderTarget/RenderTarget';\nimport type { Renderer } from '../../renderers/types';\nimport type { AlphaMask } from './AlphaMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nconst tempBounds = new Bounds();\n\nclass AlphaMaskEffect extends FilterEffect implements PoolItem\n{\n    constructor()\n    {\n        super();\n\n        this.filters = [new MaskFilter({\n            sprite: new Sprite(Texture.EMPTY),\n            inverse: false,\n            resolution: 'inherit',\n            antialias: 'inherit'\n        })];\n    }\n\n    get sprite(): Sprite\n    {\n        return (this.filters[0] as MaskFilter).sprite;\n    }\n\n    set sprite(value: Sprite)\n    {\n        (this.filters[0] as MaskFilter).sprite = value;\n    }\n\n    get inverse(): boolean\n    {\n        return (this.filters[0] as MaskFilter).inverse;\n    }\n\n    set inverse(value: boolean)\n    {\n        (this.filters[0] as MaskFilter).inverse = value;\n    }\n\n    public init: () => void;\n}\n\nexport interface AlphaMaskInstruction extends Instruction\n{\n    renderPipeId: 'alphaMask',\n    action: MaskMode,\n    mask: AlphaMask,\n    inverse: boolean;\n    maskedContainer: Container,\n    renderMask: boolean,\n}\n\nexport interface AlphaMaskData\n{\n    filterEffect: AlphaMaskEffect,\n    maskedContainer: Container,\n    previousRenderTarget?: RenderTarget,\n    filterTexture?: Texture,\n}\n\nexport class AlphaMaskPipe implements InstructionPipe<AlphaMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'alphaMask',\n    } as const;\n\n    private _renderer: Renderer;\n    private _activeMaskStage: AlphaMaskData[] = [];\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n            maskedContainer\n        } as AlphaMaskInstruction);\n\n        (mask as AlphaMask).inverse = maskedContainer._maskOptions.inverse;\n\n        if ((mask as AlphaMask).renderMaskToTexture)\n        {\n            const maskContainer = (mask as AlphaMask).mask;\n\n            maskContainer.includeInBuild = true;\n\n            collectAllRenderables(\n                maskContainer,\n                instructionSet,\n                renderer\n            );\n\n            maskContainer.includeInBuild = false;\n        }\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskEnd',\n            mask,\n            maskedContainer,\n            inverse: maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public pop(mask: Effect, _maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'popMaskEnd',\n            mask,\n            inverse: _maskedContainer._maskOptions.inverse,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public execute(instruction: AlphaMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            const filterEffect = BigPool.get(AlphaMaskEffect);\n\n            filterEffect.inverse = instruction.inverse;\n\n            if (renderMask)\n            {\n                instruction.mask.mask.measurable = true;\n\n                const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n\n                instruction.mask.mask.measurable = false;\n\n                bounds.ceil();\n\n                const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n                const filterTexture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    colorTextureSource._resolution,\n                    colorTextureSource.antialias\n                );\n\n                renderer.renderTarget.push(filterTexture, true);\n\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 0xFFFFFFFF\n                });\n\n                const sprite = filterEffect.sprite;\n\n                sprite.texture = filterTexture;\n\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture,\n                });\n            }\n            else\n            {\n                filterEffect.sprite = instruction.mask.mask as Sprite;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                });\n            }\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n\n            if (renderMask)\n            {\n                // WebGPU blit's automatically, but WebGL does not!\n                if (renderer.type === RendererType.WEBGL)\n                {\n                    renderer.renderTarget.finishRenderPass();\n                }\n\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n\n            renderer.filter.push({\n                renderPipeId: 'filter',\n                action: 'pushFilter',\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false,\n            });\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.filter.pop();\n\n            const maskData = this._activeMaskStage.pop();\n\n            if (renderMask)\n            {\n                TexturePool.returnTexture(maskData.filterTexture);\n            }\n\n            BigPool.return(maskData.filterEffect);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { CLEAR } from '../../renderers/gl/const';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    renderPipeId: 'stencilMask',\n    action: MaskMode,\n    inverse: boolean,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private _renderer: Renderer;\n\n    // used when building and also when executing..\n    private _maskStackHash: Record<number, number> = {};\n\n    private _maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = effect.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this._maskHash.has(effect))\n        {\n            this._maskHash.set(effect, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this._maskHash.get(effect);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        collectAllRenderables(\n            maskContainer,\n            instructionSet,\n            renderer,\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        this._maskStackHash[renderTargetUid] ??= 0;\n    }\n\n    public pop(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        // stencil is stored based on current render target..\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskBegin',\n            inverse: _container._maskOptions.inverse,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskData = this._maskHash.get(mask as StencilMask);\n\n        for (let i = 0; i < maskData.instructionsLength; i++)\n        {\n            // eslint-disable-next-line max-len\n            instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        }\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this._maskStackHash[renderTargetUid] ??= 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            // we create the depth and stencil buffers JIT\n            // as no point allocating the memory if we don't use it\n            renderer.renderTarget.ensureDepthStencil();\n\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n\n            maskStackIndex++;\n\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            renderer.colorMask.setMask(0);\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.renderTarget.clear(null, CLEAR.STENCIL);\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n\n            maskStackIndex--;\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            if (instruction.inverse)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n","import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { FilterEffect } from '../../../../filters/FilterEffect';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { BlendModeFilter } from '../../../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../../../filters/FilterSystem';\nimport type { Renderer } from '../../types';\nimport type { Instruction } from '../instructions/Instruction';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { InstructionPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { BLEND_MODES } from '../state/const';\n\ninterface AdvancedBlendInstruction extends Instruction\n{\n    renderPipeId: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {} as const;\n\nextensions.handle(ExtensionType.BlendMode, (value) =>\n{\n    if (!value.name)\n    {\n        throw new Error('BlendMode extension must have a name property');\n    }\n    BLEND_MODE_FILTERS[value.name as BLEND_MODES] = value.ref;\n}, (value) =>\n{\n    delete BLEND_MODE_FILTERS[value.name as BLEND_MODES];\n});\n\n/**\n * This Pipe handles the blend mode switching of the renderer.\n * It will insert instructions into the {@link renderers.InstructionSet} to switch the blend mode according to the\n * blend modes of the scene graph.\n *\n * This pipe is were wwe handle Advanced blend modes. Advanced blend modes essentially wrap the renderables\n * in a filter that applies the blend mode.\n *\n * You only need to use this class if you are building your own render instruction set rather than letting PixiJS build\n * the instruction set for you by traversing the scene graph\n * @memberof rendering\n */\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _renderableList: Renderable[];\n    private _activeBlendMode: BLEND_MODES;\n\n    private _isAdvanced = false;\n\n    private _filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n     * @param renderable - The renderable we are adding to the instruction set\n     * @param blendMode - The blend mode of the renderable\n     * @param instructionSet - The instruction set we are adding to\n     */\n    public setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this._activeBlendMode === blendMode)\n        {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n\n        this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this._isAdvanced)\n        {\n            this._beginAdvancedBlendMode(instructionSet);\n\n            this._renderableList.push(renderable);\n        }\n    }\n\n    private _beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this._activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            // #if _DEBUG\n            warn(`Unable to assign BlendMode: '${blendMode}'. `\n            + `You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            // #endif\n\n            return;\n        }\n\n        let filterEffect = this._filterHash[blendMode];\n\n        // this does need an execute?\n        if (!filterEffect)\n        {\n            filterEffect = this._filterHash[blendMode] = new FilterEffect();\n\n            filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()];\n        }\n\n        const instruction: FilterInstruction = {\n            renderPipeId: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect,\n            canBundle: false,\n        };\n\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private _endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    /**\n     * called when the instruction build process is starting this will reset internally to the default blend mode\n     * @internal\n     * @ignore\n     */\n    public buildStart()\n    {\n        this._isAdvanced = false;\n    }\n\n    /**\n     * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n     * active, we add the final render instructions added to the instruction set\n     * @param instructionSet - The instruction set we are adding to\n     * @internal\n     * @ignore\n     */\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public destroy()\n    {\n        this._renderer = null;\n        this._renderableList = null;\n\n        for (const i in this._filterHash)\n        {\n            this._filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this._filterHash = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\nconst imageTypes = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    webp: 'image/webp',\n};\n\ntype Formats = keyof typeof imageTypes;\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, imageTypes[format], quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(imageTypes[format], quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy();\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy();\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\n/**\n * A render texture, extends `Texture`.\n * @see {@link rendering.Texture}\n * @memberof rendering\n */\nexport class RenderTexture extends Texture\n{\n    public static create(options: TextureSourceOptions): RenderTexture\n    {\n        return new RenderTexture({\n            source: new TextureSource(options)\n        });\n    }\n\n    /**\n     * Resizes the render texture.\n     * @param width - The new width of the render texture.\n     * @param height - The new height of the render texture.\n     * @param resolution - The new resolution of the render texture.\n     * @returns This texture.\n     */\n    public resize(width: number, height: number, resolution?: number): this\n    {\n        this.source.resize(width, height, resolution);\n\n        return this;\n    }\n}\n","import { Color, type ColorSource } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds';\nimport { Container } from '../../../../scene/container/Container';\nimport { RenderTexture } from '../texture/RenderTexture';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { TextureSourceOptions } from '../texture/sources/TextureSource';\n\nexport type GenerateTextureSourceOptions = Omit<TextureSourceOptions, 'resource' | 'width' | 'height' | 'resolution'>;\n\n/**\n * Options for generating a texture from a container.\n * @memberof rendering\n */\nexport type GenerateTextureOptions =\n{\n    /** The container to generate the texture from */\n    target: Container;\n    /**\n     * The region of the container, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the container.\n     */\n    frame?: Rectangle;\n    /** The resolution of the texture being generated. */\n    resolution?: number;\n    /** The color used to clear the texture. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n    /** The options passed to the texture source. */\n    textureSourceOptions?: GenerateTextureSourceOptions,\n};\n\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor: ColorSource = [0, 0, 0, 0];\n\n/**\n * System that manages the generation of textures from the renderer\n *\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.textureGenerator` property.\n * @memberof rendering\n */\nexport class GenerateTextureSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGenerator',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your container is complicated and needs to be reused multiple times.\n     * @param {GenerateTextureOptions | Container} options - Generate texture options.\n     * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n     * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n     * @param {number} [options.resolution] - The resolution of the texture being generated.\n     *        if no region is specified, defaults to the local bounds of the container.\n     * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n     * @returns a shiny new texture of the container passed in\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): RenderTexture\n    {\n        if (options instanceof Container)\n        {\n            options = {\n                target: options,\n                frame: undefined,\n                textureSourceOptions: {},\n                resolution: undefined,\n            };\n        }\n\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n\n        const container = options.target;\n\n        let clearColor = options.clearColor;\n\n        if (clearColor)\n        {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n\n            clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n        }\n        else\n        {\n            clearColor = noColor;\n        }\n\n        const region = options.frame?.copyTo(tempRect)\n            || getLocalBounds(container, tempBounds).rectangle;\n\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n\n        const target = RenderTexture.create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution,\n            antialias,\n        });\n\n        const transform = Matrix.shared.translate(-region.x, -region.y);\n\n        this._renderer.render({\n            container,\n            transform,\n            target,\n            clearColor,\n        });\n\n        target.source.updateMipmaps();\n\n        return target;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\nexport interface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get globalUniformData()\n    {\n        return this._currentGlobalUniformData;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Ticker } from '../../../ticker/Ticker';\n\nimport type { System } from './system/System';\n\n// start at one too keep it positive!\nlet uid = 1;\n\n/**\n * The SchedulerSystem manages scheduled tasks with specific intervals.\n * @memberof rendering\n */\nexport class SchedulerSystem implements System<null>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'scheduler',\n        priority: 0,\n    } as const;\n\n    private readonly _tasks: {\n        func: (elapsed: number) => void;\n        duration: number;\n        offset: number\n        start: number;\n        last: number;\n        repeat: boolean;\n        id: number;\n    }[] = [];\n\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    private _offset = 0;\n\n    /** Initializes the scheduler system and starts the ticker. */\n    public init(): void\n    {\n        Ticker.system.add(this._update, this);\n    }\n\n    /**\n     * Schedules a repeating task.\n     * @param func - The function to execute.\n     * @param duration - The interval duration in milliseconds.\n     * @param useOffset - this will spread out tasks so that they do not all run at the same time\n     * @returns The unique identifier for the scheduled task.\n     */\n    public repeat(func: (elapsed: number) => void, duration: number, useOffset = true): number\n    {\n        const id = uid++;\n\n        let offset = 0;\n\n        if (useOffset)\n        {\n            this._offset += 1000;\n            offset = this._offset;\n        }\n\n        this._tasks.push({\n            func,\n            duration,\n            start: performance.now(),\n            offset,\n            last: performance.now(),\n            repeat: true,\n            id\n        });\n\n        return id;\n    }\n\n    /**\n     * Cancels a scheduled task.\n     * @param id - The unique identifier of the task to cancel.\n     */\n    public cancel(id: number): void\n    {\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            if (this._tasks[i].id === id)\n            {\n                this._tasks.splice(i, 1);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Updates and executes the scheduled tasks.\n     * @private\n     */\n    private _update(): void\n    {\n        const now = performance.now();\n\n        for (let i = 0; i < this._tasks.length; i++)\n        {\n            const task = this._tasks[i];\n\n            if ((now - task.offset) - task.last >= task.duration)\n            {\n                const elapsed = now - task.start;\n\n                task.func(elapsed);\n                task.last = now;\n            }\n        }\n    }\n\n    /**\n     * Destroys the scheduler system and removes all tasks.\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        Ticker.system.remove(this._update, this);\n\n        this._tasks.length = 0;\n    }\n}\n","import { DOMAdapter } from '../environment/adapter';\nimport { VERSION } from './const';\n\nlet saidHello = false;\n\n/**\n * Prints out the version and renderer information for this running instance of PixiJS.\n * @param type - The name of the renderer this instance is using.\n * @returns {void}\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\\n\\n`,\n            'background: #E72264; padding:5px 0;',\n            'background: #6CA2EA; padding:5px 0;',\n            'background: #B5D33D; padding:5px 0;',\n            'background: #FED23F; padding:5px 0;',\n            'color: #FFFFFF; background: #E72264; padding:5px 0;',\n            'color: #E72264; background: #FFFFFF; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\nimport { type Renderer, RendererType } from '../../types';\n\nimport type { WebGLRenderer } from '../../gl/WebGLRenderer';\nimport type { System } from '../system/System';\n\n/**\n * Options for the startup system.\n * @property {boolean} [hello=false] - Whether to log the version and type information of renderer to console.\n * @memberof rendering\n */\nexport interface HelloSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof rendering.SharedRendererOptions\n     * @default false\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof rendering\n */\nexport class HelloSystem implements System<HelloSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'hello',\n        priority: -2,\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: HelloSystemOptions = {\n        /** {@link WebGLOptions.hello} */\n        hello: false,\n    };\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    public init(options: HelloSystemOptions): void\n    {\n        if (options.hello)\n        {\n            let name = this._renderer.name;\n\n            if (this._renderer.type === RendererType.WEBGL)\n            {\n                name += ` ${(this._renderer as WebGLRenderer).context.webGLVersion}`;\n            }\n\n            sayHello(name);\n        }\n    }\n}\n","/**\n * Takes a hash and removes all the `undefined`/`null` values from it.\n * In PixiJS, we tend to null properties instead of using 'delete' for performance reasons.\n * However, in some cases, this could be a problem if the hash grows too large over time,\n * this function can be used to clean a hash.\n * @param hash - The hash to clean.\n * @returns A new hash with all the `undefined`/`null` values removed.\n * @memberof utils\n */\nexport function cleanHash<T>(hash: Record<string, T>): Record<string, T>\n{\n    let clean = false;\n\n    for (const i in hash)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (hash[i] == undefined)\n        {\n            clean = true;\n            break;\n        }\n    }\n\n    if (!clean) return hash;\n\n    const cleanHash = Object.create(null);\n\n    for (const i in hash)\n    {\n        const value = hash[i];\n\n        if (value)\n        {\n            cleanHash[i] = value;\n        }\n    }\n\n    return cleanHash;\n}\n\n/**\n * Removes all `undefined`/`null` elements from the given array and compacts the array.\n *\n * This function iterates through the array, shifting non-undefined elements to the left\n * to fill gaps created by `undefined` elements. The length of the array is then adjusted\n * to remove the trailing `undefined` elements.\n * @param arr - The array to be cleaned.\n * @returns The cleaned array with all `undefined` elements removed.\n * @example\n * // Example usage:\n * const arr = [1, undefined, 2, undefined, 3];\n * const cleanedArr = cleanArray(arr);\n * console.log(cleanedArr); // Output: [1, 2, 3]\n * @memberof utils\n */\nexport function cleanArray<T>(arr: T[]): T[]\n{\n    let offset = 0;\n\n    for (let i = 0; i < arr.length; i++)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (arr[i] == undefined)\n        {\n            offset++;\n        }\n        else\n        {\n            arr[i - offset] = arr[i];\n        }\n    }\n\n    arr.length = arr.length - offset;\n\n    return arr;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { cleanArray, cleanHash } from '../../../../utils/data/clean';\n\nimport type { Container } from '../../../../scene/container/Container';\nimport type { Renderer } from '../../types';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { RenderPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link RenderableGCSystem}.\n * @memberof rendering\n * @property {boolean} [renderableGCActive=true] - If set to true, this will enable the garbage collector on the renderables.\n * @property {number} [renderableGCAMaxIdle=60000] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [renderableGCCheckCountMax=60000] - time between two garbage collections.\n */\nexport interface RenderableGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCMaxUnusedTime: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCFrequency: number;\n}\n/**\n * System plugin to the renderer to manage renderable garbage collection. When rendering\n * stuff with the renderer will assign resources to each renderable. This could be for example\n * a batchable Sprite, or a text texture. If the renderable is not used for a certain amount of time\n * its resources will be tided up by its render pipe.\n * @memberof rendering\n */\nexport class RenderableGCSystem implements System<RenderableGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'renderableGC',\n        priority: 0\n    } as const;\n\n    /** default options for the renderableGCSystem */\n    public static defaultOptions: RenderableGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        renderableGCActive: true,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        renderableGCMaxUnusedTime: 60000,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        renderableGCFrequency: 30000,\n    };\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see renderableGCSystem.defaultMaxIdle\n     */\n    public maxUnusedTime: number;\n\n    private _renderer: Renderer;\n\n    private readonly _managedRenderables: Renderable[] = [];\n    private _handler: number;\n    private _frequency: number;\n    private _now: number;\n\n    private readonly _managedHashes: {context: any, hash: string}[] = [];\n    private _hashHandler: number;\n\n    private readonly _managedArrays: {context: any, hash: string}[] = [];\n    private _arrayHandler: number;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: RenderableGCSystemOptions): void\n    {\n        options = { ...RenderableGCSystem.defaultOptions, ...options };\n\n        this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n        this._frequency = options.renderableGCFrequency;\n\n        this.enabled = options.renderableGCActive;\n    }\n\n    get enabled(): boolean\n    {\n        return !!this._handler;\n    }\n\n    set enabled(value: boolean)\n    {\n        if (this.enabled === value) return;\n\n        if (value)\n        {\n            this._handler = this._renderer.scheduler.repeat(\n                () => this.run(),\n                this._frequency,\n                false\n            );\n\n            this._hashHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const hash of this._managedHashes)\n                    {\n                        hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n                    }\n                },\n                this._frequency\n            );\n\n            this._arrayHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const array of this._managedArrays)\n                    {\n                        cleanArray(array.context[array.hash]);\n                    }\n                },\n                this._frequency\n            );\n        }\n        else\n        {\n            this._renderer.scheduler.cancel(this._handler);\n            this._renderer.scheduler.cancel(this._hashHandler);\n            this._renderer.scheduler.cancel(this._arrayHandler);\n        }\n    }\n\n    public addManagedHash<T>(context: T, hash: string): void\n    {\n        this._managedHashes.push({ context, hash: hash as string });\n    }\n\n    public addManagedArray<T>(context: T, hash: string): void\n    {\n        this._managedArrays.push({ context, hash: hash as string });\n    }\n\n    public prerender(): void\n    {\n        this._now = performance.now();\n    }\n\n    public addRenderable(renderable: Renderable, instructionSet: InstructionSet): void\n    {\n        if (!this.enabled) return;\n\n        renderable._lastUsed = this._now;\n\n        if (renderable._lastInstructionTick === -1)\n        {\n            this._managedRenderables.push(renderable);\n            renderable.once('destroyed', this._removeRenderable, this);\n        }\n\n        renderable._lastInstructionTick = instructionSet.tick;\n    }\n\n    /** Runs the scheduled garbage collection */\n    public run(): void\n    {\n        const now = performance.now();\n\n        const managedRenderables = this._managedRenderables;\n\n        const renderPipes = this._renderer.renderPipes;\n\n        let offset = 0;\n\n        for (let i = 0; i < managedRenderables.length; i++)\n        {\n            const renderable = managedRenderables[i];\n\n            if (renderable === null)\n            {\n                offset++;\n                continue;\n            }\n\n            const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n            const currentIndex = renderGroup?.instructionSet?.tick ?? -1;\n\n            if (renderable._lastInstructionTick !== currentIndex && now - renderable._lastUsed > this.maxUnusedTime)\n            {\n                if (!renderable.destroyed)\n                {\n                    const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n                    rp[renderable.renderPipeId].destroyRenderable(renderable);\n                }\n\n                // remove from the array as this has been destroyed..\n                renderable._lastInstructionTick = -1;\n                offset++;\n                renderable.off('destroyed', this._removeRenderable, this);\n            }\n            else\n            {\n                managedRenderables[i - (offset)] = renderable;\n            }\n        }\n\n        managedRenderables.length = managedRenderables.length - offset;\n    }\n\n    public destroy(): void\n    {\n        this.enabled = false;\n        this._renderer = null as any as Renderer;\n        this._managedRenderables.length = 0;\n        this._managedHashes.length = 0;\n        this._managedArrays.length = 0;\n    }\n\n    private _removeRenderable(renderable: Container): void\n    {\n        const index = this._managedRenderables.indexOf(renderable as Renderable);\n\n        if (index >= 0)\n        {\n            renderable.off('destroyed', this._removeRenderable, this);\n            this._managedRenderables[index] = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * @deprecated since 8.3.0\n     * @see {@link TextureGCSystem.textureGCMaxIdle}\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * @deprecated since 8.3.0\n         * @see {@link TextureGCSystem.textureGCMaxIdle}\n         */\n        textureGCAMaxIdle: null,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture<CanvasSource>;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public get autoDensity(): boolean\n    {\n        return this.texture.source.autoDensity;\n    }\n    public set autoDensity(value: boolean)\n    {\n        this.texture.source.autoDensity = value;\n    }\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        this.texture.source.transparent = options.backgroundAlpha < 1;\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe';\nimport { BackgroundSystem } from '../background/BackgroundSystem';\nimport { BlendModePipe } from '../blendModes/BlendModePipe';\nimport { ExtractSystem } from '../extract/ExtractSystem';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem';\nimport { SchedulerSystem } from '../SchedulerSystem';\nimport { HelloSystem } from '../startup/HelloSystem';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem';\nimport { TextureGCSystem } from '../texture/TextureGCSystem';\nimport { ViewSystem } from '../view/ViewSystem';\n\nimport type { ExtractRendererOptions } from './utils/typeUtils';\n\nexport const SharedSystems = [\n    BackgroundSystem,\n    GlobalUniformSystem,\n    HelloSystem,\n    ViewSystem,\n    RenderGroupSystem,\n    TextureGCSystem,\n    GenerateTextureSystem,\n    ExtractSystem,\n    RendererInitHook,\n    RenderableGCSystem,\n    SchedulerSystem,\n];\n\nexport const SharedRenderPipes = [\n    BlendModePipe,\n    BatcherPipe,\n    SpritePipe,\n    RenderGroupPipe,\n    AlphaMaskPipe,\n    StencilMaskPipe,\n    ColorMaskPipe,\n    CustomRenderPipe\n];\n\n/**\n * Options for the shared systems of a renderer.\n * @memberof rendering\n */\nexport interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions\n{\n    /**\n     * Whether to stop PixiJS from dynamically importing default extensions for the renderer.\n     * It is false by default, and means PixiJS will load all the default extensions, based\n     * on the environment e.g browser/webworker.\n     * If you set this to true, then you will need to manually import the systems and extensions you need.\n     *\n     * e.g.\n     * ```js\n     * import 'accessibility';\n     * import 'app';\n     * import 'events';\n     * import 'spritesheet';\n     * import 'graphics';\n     * import 'mesh';\n     * import 'text';\n     * import 'text-bitmap';\n     * import 'text-html';\n     * import { autoDetectRenderer } from 'pixi.js';\n     *\n     * const renderer = await autoDetectRenderer({\n     *   width: 800,\n     *   height: 600,\n     *   skipExtensionImports: true,\n     * });\n     * ```\n     * @default false\n     */\n    skipExtensionImports?: boolean;\n    /**\n     * @default true\n     * @deprecated since 8.1.6\n     * @see `skipExtensionImports`\n     */\n    manageImports?: boolean;\n}\n","import { nextPow2 } from '../../../../maths/misc/pow2';\nimport { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\nlet count = 0;\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in default pool\n * @memberof rendering\n * @name TexturePool\n */\nexport class TexturePoolClass\n{\n    /** The default options for texture pool */\n    public textureOptions: TextureSourceOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n\n    private _texturePool: {[x in string | number]: Texture[]};\n    private _poolKeyHash: Record<number, number> = Object.create(null);\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n     */\n    constructor(textureOptions?: TextureSourceOptions)\n    {\n        this._texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     * @param antialias\n     */\n    public createTexture(pixelWidth: number, pixelHeight: number, antialias: boolean): Texture\n    {\n        const textureSource = new TextureSource({\n            ...this.textureOptions,\n\n            width: pixelWidth,\n            height: pixelHeight,\n            resolution: 1,\n            antialias,\n            autoGarbageCollect: true,\n        });\n\n        return new Texture({\n            source: textureSource,\n            label: `texturePool_${count++}`,\n        });\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param frameWidth - The minimum width of the render texture.\n     * @param frameHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param antialias\n     * @returns The new render texture.\n     */\n    public getOptimalTexture(frameWidth: number, frameHeight: number, resolution = 1, antialias: boolean): Texture\n    {\n        let po2Width = Math.ceil((frameWidth * resolution) - 1e-6);\n        let po2Height = Math.ceil((frameHeight * resolution) - 1e-6);\n\n        po2Width = nextPow2(po2Width);\n        po2Height = nextPow2(po2Height);\n\n        const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n\n        if (!this._texturePool[key])\n        {\n            this._texturePool[key] = [];\n        }\n\n        let texture = this._texturePool[key].pop();\n\n        if (!texture)\n        {\n            texture = this.createTexture(po2Width, po2Height, antialias);\n        }\n\n        texture.source._resolution = resolution;\n        texture.source.width = po2Width / resolution;\n        texture.source.height = po2Height / resolution;\n        texture.source.pixelWidth = po2Width;\n        texture.source.pixelHeight = po2Height;\n\n        // fit the layout to the requested original size\n        texture.frame.x = 0;\n        texture.frame.y = 0;\n        texture.frame.width = frameWidth;\n        texture.frame.height = frameHeight;\n\n        texture.updateUvs();\n\n        this._poolKeyHash[texture.uid] = key;\n\n        return texture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     * @param texture - The texture to check what size it is.\n     * @param antialias - Whether to use antialias.\n     * @returns A texture that is a power of two\n     */\n    public getSameSizeTexture(texture: Texture, antialias = false)\n    {\n        const source = texture.source;\n\n        return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    public returnTexture(renderTexture: Texture): void\n    {\n        const key = this._poolKeyHash[renderTexture.uid];\n\n        this._texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    public clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this._texturePool)\n            {\n                const textures = this._texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this._texturePool = {};\n    }\n}\n\nexport const TexturePool = new TexturePoolClass();\n","import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture<CanvasSource>> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture<CanvasSource>\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { ViewContainer } from '../view/ViewContainer';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: ViewContainer;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n"],"names":["localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","textureBit","fragment","textureBitGl","ensureAttributes","geometry","extractedData","i","attributes","attribute","attributeData","format","offset","instance","warn","ensureStartAndStride","buffers","tempStride","tempStart","j","buffer","uid","getAttributeInfoFromFormat","stride","start","GpuStencilModesToPixi","STENCIL_MODES","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","INVERSE_MASK_ACTIVE","BufferResource","EventEmitter","constructor","size","_resourceType","_touched","_resourceId","_bufferResource","destroyed","this","on","onBufferChange","emit","destroy","destroyBuffer","_RenderTarget","descriptor","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","stencil","depth","push","TextureSource","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","onSourceResize","depthStencilTexture","Texture","ensureDepthStencilTexture","pixelWidth","pixelHeight","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","off","RenderTarget","calculateProjection","pm","x","y","flipY","sign","identity","a","d","tx","ty","isRenderingToScreen","renderTarget","resource","globalThis","HTMLCanvasElement","document","body","contains","RenderTargetSystem","renderer","rootViewPort","Rectangle","viewport","onRenderTargetChange","SystemRunner","projectionMatrix","Matrix","defaultClearColor","_renderSurfaceToRenderTargetHash","Map","_gpuRenderTargetHash","Object","create","_renderTargetStack","_renderer","renderableGC","addManagedHash","finishRenderPass","adaptor","renderStart","target","clear","clearColor","frame","length","copyFrom","rootRenderTarget","renderingToScreen","postrender","bind","renderSurface","getRenderTarget","didChange","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","startRenderPass","CLEAR","ALL","contextChange","pop","currentRenderTargetData","isTexture","get","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","Math","min","ensureDepthStencil","key","CanvasSource","test","getCanvasTexture","once","delete","destroyGpuRenderTarget","set","initGpuRenderTarget","UboSystem","_syncFunctionHash","_adaptor","_systemCheck","unsafeEvalSupported","Error","ensureUniformGroup","uniformGroup","uniformData","getUniformGroupData","Buffer","data","layout","usage","BufferUsage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","uboElements","generateUboSync","syncUniformGroup","uniformGroupData","uniforms","updateUniformGroup","isStatic","_dirtyId","synced","update","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","uniformParsers","uniformParser","ubo","template","type","fragmentSrc","join","Function","loopMatrix","col","row","total","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","value","uniform","red","blendModeIds","normal","add","multiply","screen","overlay","erase","max","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_State","blendMode","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","state","default2d","State","CustomRenderPipe","updateRenderable","destroyRenderable","validateRenderable","addRenderable","container","instructionSet","renderPipes","batch","break","execute","isRenderable","render","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","RenderGroupPipe","addRenderGroup","globalUniforms","worldTransformMatrix","worldTransform","worldColor","worldColorAlpha","buildInstructions","rendererOrPipes","root","reset","buildStart","colorMask","sortableChildren","sortChildren","collectAllRenderablesAdvanced","buildEnd","collectAllRenderables","globalDisplayStatus","includeInBuild","isSimple","collectAllRenderablesSimple","renderable","setBlendMode","groupBlendMode","rp","didViewUpdate","children","effects","effect","pipe","clearList","list","index","collectRenderGroups","out","renderGroupChildren","mixHexColors","color1","color2","ratio","r1","g1","b1","r2","g2","b2","r","g","b","WHITE_BGR","mixColors","localBGRColor","parentBGRColor","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","UPDATE_VISIBLE","UPDATE_COLOR","UPDATE_BLEND","updateRenderGroupTransforms","updateChildRenderGroups","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","worldAlpha","renderGroupParent","appendFrom","relativeGroupTransform","groupColor","groupAlpha","localTransform","localColor","localAlpha","updateFlags","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","structureDidChange","groupColorAlpha","localBlendMode","localDisplayStatus","validateRenderables","childrenRenderablesToUpdate","rebuildRequired","tempMatrix","RenderGroupSystem","transform","isRenderGroup","renderGroups","originalLocalTransform","runOnRender","updateRenderables","upload","uniformBatch","renderEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","_gpuSpriteHash","_destroyRenderableBound","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","addToBatch","_batcher","updateElement","_texture","_source","checkAndUpdateTexture","batchableSprite","BigPool","return","bounds","_initGPUSprite","BatchableSprite","groupTransform","roundPixels","_roundPixels","_BatcherPipe","_batchersByInstructionSet","_activeBatches","init","getBatcher","_availableBatchers","batchers","default","DefaultBatcher","_activeBatch","begin","batchableObject","batcherName","batches","indexBuffer","setDataWithSize","indexSize","attributeBuffer","float32View","attributeSize","batcher","dirty","action","shader","BatcherPipe","extensions","handleByMap","Batcher","_Filter","Shader","options","super","enabled","_state","padding","blendRequired","clipToViewport","addResource","apply","filterManager","input","output","clearMode","applyFilter","from","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","MaskFilter","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","uInverse","inverse","entryPoint","resources","uMaskTexture","_textureMatrix","calculateSpriteMatrix","prepend","mapCoord","tempBounds","Bounds","AlphaMaskEffect","FilterEffect","filters","Sprite","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","_maskOptions","canBundle","renderMaskToTexture","maskContainer","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","ceil","colorTextureSource","filterTexture","TexturePool","getOptimalTexture","minX","minY","maskData","RendererType","WEBGL","filter","returnTexture","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","has","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","setStencilMode","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","color","alpha","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","ref","BlendModePipe","_isAdvanced","_filterHash","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","image","Image","src","base64","defaultImageOptions","quality","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","createElement","filename","href","appendChild","click","removeChild","log","console","style","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","textureSourceOptions","view","isRGBAArray","Array","isArray","shared","region","copyTo","getLocalBounds","rectangle","translate","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","color32BitToUniform","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","SchedulerSystem","_tasks","_offset","Ticker","system","_update","repeat","func","duration","useOffset","id","performance","now","last","cancel","splice","task","elapsed","remove","saidHello","sayHello","DOMAdapter","getNavigator","userAgent","toLowerCase","indexOf","args","VERSION","HelloSystem","hello","context","webGLVersion","cleanHash","hash","clean","cleanHash2","cleanArray","arr","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","renderableGCActive","_handler","scheduler","run","_hashHandler","_arrayHandler","array","addManagedArray","prerender","_now","_lastUsed","_lastInstructionTick","_removeRenderable","tick","managedRenderables","currentIndex","RenderableGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","managedTextures","autoGarbageCollect","unload","TextureGCSystem","_ViewSystem","autoDensity","deprecation","v8_0_0","createCanvas","transparent","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","ViewSystem","SharedSystems","RendererInitHook","SharedRenderPipes","TexturePoolClass","textureOptions","_poolKeyHash","_texturePool","enableFullScreen","createTexture","textureSource","label","frameWidth","frameHeight","po2Width","po2Height","nextPow2","updateUvs","getSameSizeTexture","renderTexture","destroyTextures","textures","canvasCache","onDestroy","abgr","packAsQuad","_attributeStart","_batch"],"sourceRoot":""}